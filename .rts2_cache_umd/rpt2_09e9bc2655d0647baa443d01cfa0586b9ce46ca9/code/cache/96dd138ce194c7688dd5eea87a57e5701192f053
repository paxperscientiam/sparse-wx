{"code":"import { validateMailingAddress, validateUserName } from \"~Utilities/Validate\";\r\nimport { fetch, push } from \"~Data/PushPull\";\r\nimport { BRAND } from \"~Data/Dictionary\";\r\nimport { ResetWidget } from \"~Cards/Main/Widgets/Reset\";\r\nimport { MainCard } from \"~Cards/Main\";\r\nimport { CardSectionFactory, WidgetFactory } from \"~Cards/Aux\";\r\n// @ts-ignore\r\nfunction submitNameCallback(e) {\r\n    Logger.log(e);\r\n    const name = e.formInput.user_name_key;\r\n    push([\"input\", \"user_name_key\"], name);\r\n    if (!name) {\r\n        return false;\r\n    }\r\n    const isUserNameValid = validateUserName(name);\r\n    if (isUserNameValid[0]) {\r\n        push([\"state\", \"input.name\"], \"valid\");\r\n        push([\"state\", \"mint\"], false);\r\n        push([\"user\", \"name\"], name);\r\n        return true;\r\n    }\r\n    else {\r\n        push([\"state\", \"input.name\"], \"invalid\");\r\n        throw new Error(\"bad name\");\r\n    }\r\n}\r\n//\r\n//   if (true & name) {\r\n//     return false\r\n//   }\r\n//   Logger.log(`Submitted name is ${name}`)\r\n//\r\n//   if (isUserNameValid[0] && name.length > 0) {\r\n//     Logger.log(`User's chosen name is ${name}.`)\r\n//     user.name = name\r\n//     return true\r\n//   } else {\r\n//     // @ts-ignore\r\n//     throw new Error(isUserNameValid[1].message)\r\n//   }\r\n//   return false\r\n// }\r\n// @ts-ignore\r\nApplication.submitAddressCallback = (e) => {\r\n    const address = e.formInput.user_address_key;\r\n    // @test\r\n    push([\"input\", \"user_address_key\"], address);\r\n    const storedAddress = fetch(\"user\", \"address\");\r\n    if (!address && !storedAddress) {\r\n        throw new Error(\"First time? You'll need to set an address\");\r\n    }\r\n    else if (!address) {\r\n        // false means don't process\r\n        return false;\r\n    }\r\n    Logger.log(`Submitted address is ${address}`);\r\n    const isValid = validateMailingAddress(address);\r\n    // if valid, retrieve address from storage\r\n    if (isValid[0]) {\r\n        push([\"state\", \"input.address\"], \"valid\");\r\n        push([\"state\", \"mint\"], false);\r\n        //  const cache = CacheService.getUserCache()\r\n        // cache.removeAll([\"wxRaw\", \"wxRawForecast\"])\r\n        // successful validation means that lon,lat, and address properties defined\r\n        return true;\r\n    }\r\n    else {\r\n        const response = \"Sorry, try a different address.\";\r\n        if (isValid[1] === \"ZERO_RESULTS\") {\r\n            push([\"state\", \"input.address\"], \"ZERO_RESULTS\");\r\n            throw new Error(\"Sorry, that address wasn't found. Try something else.\");\r\n        }\r\n        if (isValid[1] === \"UNSUPPORTED_REGION\") {\r\n            push([\"state\", \"input.address\"], \"UNSUPPORTED_REGION\");\r\n            throw new Error(`Sorry, ${BRAND.NAME} only supports results for the USA.`);\r\n        }\r\n        push([\"state\", \"input.address\"], \"ERR\");\r\n        throw new Error(response);\r\n    }\r\n};\r\n// @ts-ignore\r\nApplication.submitTemperatureUnitCallback = (e) => {\r\n    const chosenTempUnit = e.formInputs.temperature_unit_list[0];\r\n    const currentTempUnit = e.temp_unit;\r\n    if (currentTempUnit === chosenTempUnit) {\r\n        return false;\r\n    }\r\n    if (!chosenTempUnit || chosenTempUnit === \"\") {\r\n        return false;\r\n    }\r\n    push([\"user\", \"temp_unit\"], chosenTempUnit);\r\n    return true;\r\n};\r\n// // @ts-ignore\r\n// Application.goToHomeCardCallback = () => {\r\n//   return CardService.newActionResponseBuilder()\r\n//     .setNavigation(\r\n//       CardService.newNavigation().pushCard(MainCard().build()),\r\n//     )\r\n//     .setStateChanged(false)\r\n//     .build()\r\n// }\r\n// @ts-ignore\r\nApplication.getAddressSuggestionsCallback = () => {\r\n    Logger.log(\"Address suggestions callback ... called\");\r\n    // will use recent entries\r\n    const suggestions = CardService.newSuggestions();\r\n    const arrSuggestionsTemp = [\r\n        user.suggested_address_one,\r\n        user.suggested_address_two,\r\n        user.suggested_address_three,\r\n    ];\r\n    // arrSuggestionsTemp.forEach((element) => {\r\n    //     if (element != null) {\r\n    //       suggestions.addSuggestion(element)\r\n    //     }\r\n    //   })\r\n    suggestions\r\n        .addSuggestion(\"one\")\r\n        .addSuggestion(\"two\")\r\n        .addSuggestion(\"three\");\r\n    return CardService.newSuggestionsResponseBuilder()\r\n        .setSuggestions(suggestions)\r\n        .build();\r\n};\r\n// @ts-ignore\r\nApplication.processUserPreferencesFormCallback = (e) => {\r\n    Logger.log(\"processUserPreferencesFormCallback ... \");\r\n    let shouldProcess = false;\r\n    let notification = \"\";\r\n    try {\r\n        const isNameChanged = submitNameCallback(e);\r\n        // @ts-ignore\r\n        shouldProcess = shouldProcess || isNameChanged;\r\n        if (isNameChanged) {\r\n            notification = \"Name set. \";\r\n        }\r\n    }\r\n    catch (event) {\r\n        return CardService.newActionResponseBuilder()\r\n            .setNotification(CardService.newNotification()\r\n            .setType(CardService.NotificationType.ERROR)\r\n            .setText(event.message))\r\n            .setStateChanged(false)\r\n            .build();\r\n    }\r\n    try {\r\n        const isAddressChanged = Application.submitAddressCallback(e);\r\n        // @ts-ignore\r\n        shouldProcess = shouldProcess || isAddressChanged;\r\n        if (isAddressChanged) {\r\n            notification += \"Address set.\";\r\n        }\r\n    }\r\n    catch (event) {\r\n        return CardService.newActionResponseBuilder()\r\n            .setNotification(CardService.newNotification()\r\n            .setType(CardService.NotificationType.ERROR)\r\n            .setText(event.message))\r\n            .setStateChanged(false)\r\n            .build();\r\n    }\r\n    try {\r\n        const isTempUnitChanged = submitTemperatureUnitCallback(e);\r\n        // @ts-ignore\r\n        shouldProcess = shouldProcess || isTempUnitChanged;\r\n        if (isTempUnitChanged) {\r\n            notification += \" Unit changed.\";\r\n        }\r\n    }\r\n    catch (event) {\r\n        return CardService.newActionResponseBuilder()\r\n            .setNotification(CardService.newNotification()\r\n            .setType(CardService.NotificationType.ERROR)\r\n            .setText(event.message))\r\n            .setStateChanged(false)\r\n            .build();\r\n    }\r\n    if (shouldProcess) {\r\n        return CardService.newActionResponseBuilder()\r\n            .setNavigation(CardService\r\n            .newNavigation()\r\n            .pushCard(MainCard().build()))\r\n            .setNotification(CardService.newNotification()\r\n            .setType(CardService.NotificationType.INFO)\r\n            .setText(notification))\r\n            .setStateChanged(true)\r\n            .build();\r\n    }\r\n    return CardService.newActionResponseBuilder()\r\n        .setNotification(CardService.newNotification()\r\n        .setType(CardService.NotificationType.INFO)\r\n        .setText(`Nothing changed`))\r\n        .setStateChanged(false)\r\n        .build();\r\n};\r\nexport function UserSection() {\r\n    const isMint = !!fetch(\"state\", \"mint\");\r\n    const userzip = fetch(\"user\", \"zip_code\");\r\n    const submitAddressSuggestionsAction = CardService.newAction()\r\n        .setFunctionName(\"getAddressSuggestionsCallback\")\r\n        .setParameters({});\r\n    const processUserFormAction = CardService.newAction()\r\n        .setFunctionName(\"processUserPreferencesFormCallback\")\r\n        .setParameters({});\r\n    let setAddressTitle = \"Forecast Location\";\r\n    if (userzip) {\r\n        setAddressTitle += ` (${userzip})`;\r\n    }\r\n    const cardSection = new CardSectionFactory();\r\n    const widgetFactory = new WidgetFactory();\r\n    push([\"state\", \"menu.submitTemp.options.values\"], \"dropdown_item_f, dropdown_item_c\");\r\n    cardSection\r\n        .addWidget(widgetFactory._TextInput({\r\n        fieldName: \"user_name_key\",\r\n        hint: \"How should SparseWx address you? (25 character max)\",\r\n        title: \"Your Name (optional)\",\r\n    }))\r\n        .addWidget(widgetFactory._TextInput({\r\n        fieldName: \"user_address_key\",\r\n        hint: \"City, state or ZIP code\",\r\n        title: setAddressTitle,\r\n        suggestions: submitAddressSuggestionsAction,\r\n    }))\r\n        .addWidget(widgetFactory._SelectionInput({\r\n        fieldName: \"temperature_unit_list\",\r\n        items: [\r\n            {\r\n                text: \"Fahrenheit\",\r\n                value: \"dropdown_item_f\",\r\n                selected: true,\r\n            },\r\n            {\r\n                text: \"Celsius\",\r\n                value: \"dropdown_item_c\",\r\n                selected: false,\r\n            },\r\n        ],\r\n        title: \"Temperature Scale\",\r\n        type: \"DROPDOWN\",\r\n    }))\r\n        .addWidget(widgetFactory._TextButton({\r\n        action: processUserFormAction,\r\n        text: \"Submit\",\r\n    }));\r\n    if (!isMint) {\r\n        cardSection\r\n            .addWidget(ResetWidget());\r\n    }\r\n    return cardSection.setCollapsible(false).build();\r\n}\r\n//# sourceMappingURL=User.js.map","map":"{\"version\":3,\"file\":\"User.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/Cards/User/Sections/User.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/ramos/Development/gmail-weather/Cards/User/Sections/User.d.ts","writeByteOrderMark":false,"text":"/// <reference types=\"app\" />\r\nexport declare function UserSection(): CardSection;\r\n"}}
