{"code":"//     Copyright (C) 2018 Christopher David Ramos\r\nimport { timeStamp } from \"~Utilities/Date\";\r\nimport { GoogleGeoCodeInterface, PROPS, } from \"~Data/Dictionary\";\r\nimport { push } from \"~Data/PushPull\";\r\n// @ts-ignore\r\nexport function checkLocationServiceStatus() {\r\n    // simply tests if service returns a good result\r\n    const result = Maps.newGeocoder().geocode(\"10011\");\r\n    Logger.log(`[${timeStamp()}][locationServiceStatus] ${result.status}`);\r\n    push([\"state\", \"status.location\"], result.status);\r\n    return result.status;\r\n}\r\n// function getCoordinatesFromAddressService(address: string) {\r\n//   const response = Maps.newGeocoder().geocode(address)\r\n//     .results\r\n//   const result =  {\r\n//     lat: response[0].geometry.location.lat.toFixed(4),\r\n//     lon: response[0].geometry.location.lng.toFixed(4),\r\n//   }\r\n//   result.coo = result.lat + \",\" + result.lon\r\n//   return result\r\n// }\r\nexport function processGeocoderResultsService(polity, geometry) {\r\n    const GeoInterface = GoogleGeoCodeInterface;\r\n    const lon = geometry.location.lng.toFixed(4);\r\n    const lat = geometry.location.lat.toFixed(4);\r\n    const coordinate = lat + \",\" + lon;\r\n    const localeKeys = Object.keys(PROPS.userLocale);\r\n    localeKeys.forEach((key) => {\r\n        push([\"user\", key], null);\r\n    });\r\n    push([\"polity\"], polity);\r\n    polity.forEach((pol) => {\r\n        if (pol.types.indexOf(GeoInterface.CITY) > -1) {\r\n            push([\"user\", \"city\"], pol.short_name);\r\n        }\r\n        if (pol.types.indexOf(GeoInterface.STATE) > -1) {\r\n            push([\"user\", \"state\"], pol.short_name);\r\n            push([\"user\", \"state_long\"], pol.long_name);\r\n        }\r\n        if (pol.types.indexOf(GeoInterface.COUNTY) > -1) {\r\n            push([\"user\", \"county\"], pol.short_name);\r\n        }\r\n        if (pol.types.indexOf(GeoInterface.COUNTRY) > -1) {\r\n            push([\"user\", \"country\"], pol.long_name);\r\n        }\r\n        if (pol.types.indexOf(GeoInterface.ZIP_CODE) > -1) {\r\n            push([\"user\", \"zip_code\"], pol.long_name);\r\n        }\r\n    });\r\n    push([\"user\", \"lat\"], lat);\r\n    push([\"user\", \"lon\"], lon);\r\n    push([\"user\", \"coordinate\"], coordinate);\r\n    Logger.log(`[${timeStamp()}][lon] ${lon}`);\r\n    Logger.log(`[${timeStamp()}][lat] ${lat}`);\r\n    Logger.log(`[${timeStamp()}][coordinate] ${coordinate}`);\r\n}\r\n//# sourceMappingURL=Location.js.map","map":"{\"version\":3,\"file\":\"Location.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../src/Services/Location.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/ramos/Development/gmail-weather/Services/Location.d.ts","writeByteOrderMark":false,"text":"/// <reference types=\"app\" />\r\nexport declare function checkLocationServiceStatus(): any;\r\nexport declare function processGeocoderResultsService(polity: IData, geometry: IData): void;\r\n"}}
