{"version":3,"sources":["src/Controllers/BaseCardController.ts","src/Handlers/Templates.ts","src/Data/Dictionary.ts","src/Data/PushPull.ts","src/Cards/Aux.ts","src/Cards/Main/Sections/Disclaimer.ts","src/Controllers/MainCardController.ts","src/Cards/User/Sections/UserReturnHome.ts","src/Cards/User/Sections/UserInput.ts","src/Controllers/ViewsController.ts","src/Models/UserModel.ts","src/Cards/User/Sections/UserInfo.ts","src/Cards/User/Sections.ts","src/Models/BaseCardModel.ts","src/Models/GenericModel.ts","src/Utilities/Date.ts","src/Models/MainCardModel.ts","src/Models/UserCardModel.ts","src/Models.ts","src/Models/ApplicationModel.ts","src/Services/Location.ts","src/Handlers/JsonResponse.ts","src/Handlers/nwsUrlHandlers.ts","src/Handlers/Aux.ts","src/Services/Weather.ts","src/Services/HighlightHolidayService.ts","src/Services/ComputeApparentTemperatureService.ts","src/Services/IsColdService.ts","src/Services/User.ts","src/Services.ts","src/Utilities/Validate.ts","src/Handlers/Callbacks.ts","src/Controllers/UserCardController.ts","src/Controllers.ts","src/index.ts"],"names":["constructor","card","CardService","newCardBuilder","cardHeader","newCardHeader","bindingContext","source","name","setName","title","setTitle","subtitle","setSubtitle","addSections","sections","forEach","section","addSection","build","setHeader","templateFileName","data","templateBaseDir","template","HtmlService","createTemplateFromFile","Object","keys","key","evaluate","getContent","GoogleGeoCodeInterface","NationalWeatherServiceInterface","API","ALERTS","ACTIVE","_","GRID_POINTS","FORECAST","HOURLY","POINTS","URL","STATE_ALERTS","WX_SERVICE","PARAMS","escaping","headers","muteHttpExceptions","DEFAULTS","OPTIONS","TEMP_SELECTION_ITEMS","applicationState","CACHE","WX","RAW","WX_API","WX_API_ENDPOINT","WX_API_PARAMS","WX_UPDATE_TIME","WX_TIMEZONE","WX_TZ","CWA","userBio","userLocale","AUTHOR","EMAILS","BUGS","NAME","URLS","LICENSE","NWS","PRIVACY","version","COLORS","SCHEME","HIGHLIGHT","PALETTE","ORANGE","PRIMARY","NAVY","QUATERNARY","BLUE","SECONDARY","RED","TERTIARY","SILVER","PLACEHOLDER_TEXT","CARD_SECTION_HEADER","CARD_SUBTITLE","WIDGETS","WEATHER_TODAY","COLOR_ONE","WX_SECTION__WIDGET_COUNT","referencePropComplex","value","reference","property","obj","JSON","parse","globalThis","userProperties","getProperty","dset_1d","setProperty","stringify","object_path_1d","withInheritedProps","get","image","setImageUrl","addCardAction","args","newCardSection","header","PushPull_1","addWidget","widget","addWidgets","widgets","setCollapsible","newTextInput","setFieldName","fieldName","setHint","hint","suggestions","setSuggestionsAction","newSelectionInput","type","setType","SelectionInputType","DROPDOWN","items","item","isSelected","addItem","text","newTextParagraph","setText","newTextButton","action","setOnClickAction","newKeyValue","setContent","content","iconUrl","setIconUrl","multiline","setMultiline","_TextInput","_SelectionInput","_Paragraph","_TextButton","_KeyValue","route","widgetFactory","Aux_1","cardSection","Templates_1","license","Dictionary_1","nws","privacy","newImage","setAltText","BaseCardController_1","Disclaimer_1","setFixedFooter","newFixedFooter","setPrimaryButton","setOpenLink","newOpenLink","setUrl","UI","goToMainCardAction","newAction","setFunctionName","render","namespace","address","zipcode","zip","country","isMint","bool","temperatureUnit","unit","model","UserModel_1","useraddress","username","Logger","log","textContent","ViewsController_1","date","format","Utilities","formatDate","Date","getUserTimeZone","timeZone","HOUR","Number","WEEKDAY","WEEK_DAY","MONTH","TIME","GREETING","millisec","seconds","Math","round","minutes","hours","days","msgDate","getTime","todayDate","now","age","timeConversion","CalendarApp","getDefaultCalendar","getTimeZone","temperature","toFixed","toTimeString","slice","da","Date_1","BaseCardModel_1","Models_1","isUserNameValid","isAddressValid","result","Maps","newGeocoder","geocode","status","polity","geometry","GeoInterface","lon","location","lng","lat","coordinate","localeKeys","pol","types","indexOf","CITY","short_name","STATE","long_name","COUNTY","COUNTRY","ZIP_CODE","url","query","params","objJsonHandlerMethods","fetch","response","UrlFetchApp","json","getContentText","responseData","method","create","uri","base","alerts","active","getMetaLink","coordinates","fn","fnArgs","cacheName","cacheTime","objCacheMethodsBuilder","cache","CacheService","getUserCache","cached","message","hits","put","invalidate","cachedName","getResult","coord","urlForMeta","nwsUrlHandlers_1","preWxRaw","JsonResponse_1","wxRaw","bind","wxResponse","nwsMetaLocationData","cacheData","push","dlv_ts_1d","wxUrl","undefined","fetchResponse","cacheStatus","wx","updateTime","elevation","wxPeriodCounts","wxPeriodCount","length","getPeriod","period","periodic","properties","periods","condition","shortForecast","toLowerCase","icon","isDaytime","temp","windDirection","windSpeed","cwa","cwaUrl","urlWxServiceCheck","e","lastUpdateTime","diff","userstate","urlWxAlerts","count","areas","dayName","some","rx","test","windspeed","tempUnit","windchill","pow","parseInt","toString","MAROON","input","userModel","setRegion","results","address_components","approvedPolities","strPolity","isApprovedPolity","deleteProperty","Services_1","Models_2","applicationModel","ApplicationModel_1","formInput","user_name_key","Validate_1","Error","submitAddressCallback","user_address_key","storedAddress","isValid","submitTemperatureUnitCallback","chosenTempUnit","formInputs","temperature_unit_list","currentTempUnit","temp_unit","getAddressSuggestionsCallback","newSuggestions","arrSuggestionsTemp","user","suggested_address_one","suggested_address_two","suggested_address_three","addSuggestion","newSuggestionsResponseBuilder","setSuggestions","processUserPreferencesFormCallback","mainCard","Controllers_1","shouldProcess","notification","isNameChanged","submitNameCallback","event","newActionResponseBuilder","setNotification","newNotification","NotificationType","ERROR","setStateChanged","isAddressChanged","isTempUnitChanged","setNavigation","newNavigation","pushCard","INFO","applicatioModel","userzip","submitAddressSuggestionsAction","setParameters","processUserFormAction","setAddressTitle","selected","Sections_1","Callbacks_1","PropertiesService","getUserProperties","buildAddOn","buildHomePage"],"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","file":"","sourcesContent":["interface IDamn {\n    route: string\n    source: any\n}\n\nexport class BaseCardController implements IDamn {\n    route!: string\n    view!: any\n    source!: any\n\n    card: CardBuilder\n    cardHeader: CardHeader\n\n    constructor() {\n        this.card = CardService.newCardBuilder()\n        this.cardHeader = CardService.newCardHeader()\n    }\n\n    bindingContext(source: any) {\n        this.source = source\n        if (!!this.source.name) {\n            this.setName()\n        }\n        if (!!this.source.title) {\n            this.setTitle()\n        }\n        if (!!this.source.subtitle) {\n            this.setSubtitle()\n        }\n    }\n\n    private setName() {\n        this.card = this.card.setName(this.source.name)\n    }\n\n    private setTitle() {\n        this.cardHeader = this.cardHeader.setTitle(this.source.title)\n    }\n\n    private setSubtitle() {\n        this.cardHeader = this.cardHeader.setSubtitle(this.source.subtitle)\n    }\n\n    addSections(sections: CardSection[]): BaseCardController {\n        sections.forEach((section: CardSection) => {\n            if (section != null) {\n                this.card.addSection(section)\n            }\n        })\n        return this\n    }\n\n    addSection(section: CardSection): BaseCardController {\n        this.card.addSection(section)\n        return this\n    }\n\n    build(): Card {\n        return this.card.setHeader(this.cardHeader).build()\n    }\n}\n","//     Copyright (C) 2018 Christopher David Ramos\nexport function render(templateFileName: string, data: InputObject): string {\n  const templateBaseDir = \"src/Views/\"\n  const template = HtmlService.createTemplateFromFile(\n    `${templateBaseDir}${templateFileName}`)\n  // make sure not to pass undefined, null, or empty string to template engine\n  Object.keys(data).forEach((key) => {\n    if (data[key] == null) {\n      data[key] = \" \"\n    }\n  })\n  // @ts-ignore\n  template.data = data\n  return template.evaluate().getContent()\n}\n","//     Copyright (C) 2018 Christopher David Ramos\nexport enum GoogleGeoCodeInterface {\n  // values are those used by Google\n  CITY = \"locality\",\n  COUNTRY = \"country\",\n  COUNTY = \"administrative_area_level_2\",\n  STATE = \"administrative_area_level_1\",\n\n  ZIP      = \"postal_code\",\n  ZIP_CODE = \"postal_code\",\n\n  LAT      =  \"lat\",\n  LON      =  \"lng\",\n}\n\nexport const INTERFACE = {\n  GoogleGeoCodeInterface,\n  NationalWeatherServiceInterface: {\n    // NWS values\n    API: {\n      ALERTS: {\n        ACTIVE: \"alerts/active\",\n        _: \"alerts\",\n      },\n      GRID_POINTS: {\n        FORECAST: {\n          HOURLY: \"@wfo/@xy/forecast/hourly\",\n          _: \"@wfo/@xy/forecast\",\n        },\n        _: \"@wfo/@xy\",\n      },\n      POINTS: {\n        _: \"points\",\n      },\n      _: \"https://api.weather.gov/\",\n    },\n    URL: {\n      STATE_ALERTS: \"https://alerts.weather.gov/cap/\",\n    },\n  },\n}\n\nexport enum APPROVED_POLITIES {\n  UNITED_STATES = \"United States\",\n  US            = \"US\",\n\n  PR            = \"PR\",\n  PUERTO_RICO   = \"Puerto Rico\",\n\n  GUAM          = \"Guam\",\n}\n\nexport const HTTP = {\n  WX_SERVICE: {\n    PARAMS: {\n      escaping: false,\n      headers: {\n        \"Accept\": \"application/geo+json;version=1\",\n        \"From\": \"chrisdavidramos@gmail.com\",\n        // tslint:disable-next-line:max-line-length\n        \"User-Agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.13; rv:62.0) Gecko/20100101 Firefox/62.0 SparseWX/2066190da3f83c823e3733b925a033e5\",\n      },\n      muteHttpExceptions: true,\n    },\n    URL: {\n      STATE_ALERTS: \"https://alerts.weather.gov/cap/\",\n    },\n  },\n}\n\nexport enum applicationState {\n  mint          = \"applicationState_mint\",\n  wxService     = \"applicationState_wxService\",\n  marker        = \"applicationState_marker\",\n\n  test_lat      = \"applicationState_test_lat\",\n  test_lon      = \"applicationState_test_lon\",\n  test_coo      = \"applicationState_test_coo\",\n  test_submittedAddress = \"applicationState_test_submittedAddress\",\n  test_chosenTempUnit = \"applicationState_test_chosenTempUnit\",\n  test_validAddress = \"applicationState_test_validAddress\",\n  test_validUsername = \"applicationState_test_validUsername\",\n  test_WeatherSectionAddress = \"applicationState_test_WeatherSectionAddress\",\n  test_WeatherWidgetArgs = \"applicationState_test_WeatherWidgetArgs\",\n  test_WeatherServiceArgs = \"applicationState_test_WeatherServiceArgs\",\n  test_urlNwsMetadata = \"applicationState_test_urlNwsMetadata\",\n  test_wxUrl = \"applicationState_test_wxUrl\",\n  test_WeatherServiceResultTemp = \"applicationState_test_WeatherServiceResultTemp\",\n  test_weatherWidgetException = \"applicationState_test_weatherWidgetException\",\n  test_WxWidgetCount = \"applicationState_test_WxWidgetCount\",\n  test_alertUrl = \"applicationState_test_alertUrl\",\n  test_metaDataUrl = \"applicationState_test_metaDataUrl\",\n  test_urlWxServiceCheck = \"applicationState_test_urlWxServiceCheck\",\n  test_userServiceCheck = \"applicationState_test_userServiceCheck\",\n  test_wxServiceResultTemp = \"applicationState_test_wxServiceResultTemp\",\n  test_wxPeriodCount = \"applicationState_test_wxPeriodCount\",\n  test_wxTimeZone = \"applicationState_test_wxTimeZone\",\n  test_catchEx = \"applicationState_test_catchEx\",\n\n  test_JRHfetch = \"applicationState_test_JRHfetch\",\n  test_fetchResponse = \"applicationState_test_fetchResponse\",\n\n  test_submitNameCallback = \"applicationState_test_submitNameCallback\",\n  test_shouldProcessForm = \"applicationState_test_shouldProcessForm\",\n  test_wxSuccessfulFetch = \"applicationState_test_wxSuccessfulFetch\",\n\n  test_PrepWx = \"applicationState_test_PrepWx\",\n\n  test_StatusCheck = \"applicationState_test_StatusCheck\",\n\n  test_wxPN = \"applicationState_test_wxPN\",\n}\n\nexport enum userBio {\n  name       = \"user_name\",\n  temp_unit  = \"user_temp_unit\",\n\n  suggested_address_one = \"user_address\",\n  suggested_address_two = \"suggested_address_two\",\n\n  suggested_address_three = \"suggested_address_three\",\n}\n\nexport enum userLocale {\n  address    = \"user_address\",\n  city       = \"user_city\",\n\n  coo          = \"user_coordinate\",\n  coordinate   = \"user_coordinate\",\n  coordinates  = \"user_coordinate\",\n  lat        = \"user_lat\",\n  lon        = \"user_lon\",\n\n  country    = \"user_country\",\n  county     = \"user_county\",\n  region     = \"user_region\",\n  state      = \"user_region\",\n  state_long = \"user_region_long\",\n  tz         = \"user_tz\",\n  zip        = \"user_zip_code\",\n  zip_code   = \"user_zip_code\",\n}\n\nexport enum DEFAULTS {\n  TEMP_UNIT = \"dropdown_item_f\",\n}\n\nexport const PROPS = {\n  DEFAULTS,\n\n  OPTIONS: {\n    TEMP_SELECTION_ITEMS: [\n      [\"Fahrenheit\", \"dropdown_item_c\", 0],\n      [\"Celsius\", \"dropdown_item_c\", 1],\n    ],\n  },\n\n  applicationState,\n\n  CACHE: {\n    WX: {\n      RAW: \"CACHE_WX_RAW\",\n    },\n  },\n  WX: {\n    WX_API: \"WX_API\", // object\n    WX_API_ENDPOINT: \"WX_API_ENDPOINT\", // string\n    WX_API_PARAMS: \"WX_API_PARAMS\", // object\n    WX_UPDATE_TIME: \"WX_UPDATE_TIME\",\n\n    WX_TIMEZONE: \"WX_TZ\",\n    WX_TZ: \"WX_TZ\",\n\n    CWA: \"WX_CWA\",\n  },\n  userBio,\n  userLocale,\n}\n\nexport const BRAND = {\n  AUTHOR: \"Christopher David Ramos\",\n  EMAILS: {\n    BUGS: [\"sparsewx@paxperscientiam.com\", \"'SparseWx' <sparsewx@paxperscientiam.com>\"],\n  },\n  NAME: \"SparseWx\",\n  URLS: {\n    LICENSE: \"https://github.com/paxperscientiam/sparse-wx/blob/license.txt/license.txt\",\n    NWS: \"https://www.weather.gov/\",\n\n    PRIVACY: \"https://github.com/paxperscientiam/sparse-wx/blob/privacy-policy.md/privacy.md\",\n  },\n  version: \" \",\n}\n\nexport enum CARDINAL_DIRECTIONS {\n  EAST = \"east\",\n  // EAST = \"⇛\",\n  NORTH = \"north\",\n  // NORTH = \"⇑\",\n  NORTH_EAST = \"northeast\",\n  // NORTH_EAST = \"⇗\",\n  NORTH_NE = \"north-northeast\",\n  NORTH_NW = \"north-northwest\",\n  NORTH_WEST = \"northwest\",\n  // NORTH_WEST = \"⇖\",\n  //\n  SOUTH = \"south\",\n  // SOUTH = \"⇓\",\n  //      SOUTH_EAST = \"southeast\",\n  // SOUTH_EAST = \"⇘\",\n  South = \"southwest\",\n  SOUTH_WEST = \"⇙\",\n\n  N = \"north\",\n  NE = \"northeast\",\n  NNE = \"north-northeast\",\n  NNW = \"north-northwest\",\n  NW = \"northwest\",\n\n  E = \"east\",\n  ENE = \"east-northeast\",\n  ESE = \"east-southeast\",\n\n  S = \"south\",\n  SE = \"southeast\",\n  SSE = \"south-southeast\",\n  SSW = \"South-southwest\",\n  SW = \"southwest\",\n\n  W = \"west\",\n  WEST = \"west\",\n  WNW = \"west-northwest\",\n  WSW = \"west-southwest\",\n}\n\nexport enum PALETTE {\n  AQUA   = \"#7FDBFF\",\n  BLUE   = \"#0074D9\",\n  NAVY   = \"#001f3f\",\n  TEAL   = \"#39CCCC\",\n\n  GREEN  = \"#2ECC40\",\n  LIME   = \"#01FF70\",\n  OLIVE  = \"#3D9970\",\n  YELLOW = \"#FFDC00\",\n\n  FUCHSIA = \"#F012BE\",\n  MAROON = \"#85144b\",\n  ORANGE = \"#FF851B\",\n  RED    = \"#FF4136\",\n\n  BLACK  = \"#111111\",\n  GRAY   = \"#AAAAAA\",\n  PURPLE = \"#B10DC9\",\n  SILVER = \"#DDDDDD\",\n\n  WHITE  = \"#FFFFFF\",\n}\n\nexport const UI = {\n  COLORS: {\n    SCHEME: {\n      HIGHLIGHT  : PALETTE.ORANGE,\n      PRIMARY    : PALETTE.NAVY,\n      QUATERNARY : PALETTE.BLUE,\n      SECONDARY  : PALETTE.RED,\n      TERTIARY   : PALETTE.SILVER,\n    },\n  },\n  PALETTE,\n  PLACEHOLDER_TEXT: {\n    CARD_SECTION_HEADER: \" \",\n    CARD_SUBTITLE: \" \",\n  },\n  // https://clrs.cc/\n  WIDGETS: {\n    WEATHER_TODAY: {\n      COLOR_ONE: \"#4a707a\",\n    },\n  },\n  WX_SECTION__WIDGET_COUNT: 8,\n}\n","import objectPath from \"object-path\"\n\ndeclare const Application: ISparseWx\n\n// @ts-ignore\nimport dset from \"dset\"\n\nexport function push(referencePropComplex: string[], value: any) {\n  const reference = referencePropComplex[0]\n  const property = referencePropComplex[1]\n\n  // @ts-ignore\n  let obj = JSON.parse(globalThis.userProperties.getProperty(reference))\n  if (obj == null) {\n    obj = {}\n  }\n  if (!!property) {\n    dset(obj, property, value)\n  } else {\n    obj = value\n  }\n  globalThis.userProperties.setProperty(reference, JSON.stringify(obj))\n}\n\nexport function fetch(reference: string, property?: any) {\n  // @ts-ignore\n  let obj = JSON.parse(globalThis.userProperties.getProperty(reference))\n  if (obj == null) {\n    obj = {}\n    globalThis.userProperties.setProperty(reference, \"{}\")\n    return null\n  }\n  if (property == null) {\n    return obj\n  }\n  return objectPath.withInheritedProps.get(obj, property)\n}\n","//     Copyright (C) 2018 Christopher David Ramos\nimport {fetch, push as pushy} from \"@/Data/PushPull\"\n\ninterface ICardData {\n  image?: any,\n  name?: string,\n  title?: string,\n  subtitle?: string,\n}\n\ninterface ICardWrapper extends CardBuilder {\n  // (data: ICardData): InstanceType<this>\n  addSections: (sections: CardSection[]) => this\n  setHeader: (cardHeader: CardHeader) => this\n  setName: (name: string) => this\n}\n\ninterface ICardSectionData {\n  header?: string\n}\n\ninterface ICardSectionWrapper {\n  // (data: ICardSectionData): CardSectionFactory\n  data: ICardSectionData\n  section: CardSection\n\n  addWidgets: (widgets: Widget[]) => this\n  addWidget: (widget: Widget) => this\n  setCollapsible: (value: boolean) => this\n  build: () => CardSection\n}\n\ninterface IWidgetData {\n  fieldName: string\n  title: string\n  hint: string\n\n}\ninterface IWidgetSuggestionsData extends IWidgetData {\n  suggestions: Action\n}\ninterface IWidgetSuggestionsData extends IWidgetData {\n  suggestions: Action\n}\ninterface IWidgetSelectionData extends IWidgetData {\n  type: SelectionInputType\n  items: any[]\n}\n\n// model\nexport class CardFactory implements ICardWrapper {\n  card: CardBuilder = CardService.newCardBuilder()\n  cardHeader: CardHeader = CardService.newCardHeader()\n\n  constructor(data: ICardData) {\n    if (data.name) {\n      this.card.setName(data.name)\n    }\n    if (data.title) {\n      this.cardHeader.setTitle(data.title)\n    }\n    if (data.subtitle) {\n      this.cardHeader.setSubtitle(data.subtitle)\n    }\n    if (data.image) {\n      this.cardHeader.setImageUrl(data.image)\n    }\n    this.card.setHeader(this.cardHeader)\n  }\n\n  addSections(sections: CardSection[]) {\n    sections.forEach((section: CardSection) => {\n      if (section != null) {\n        this.card.addSection(section)\n      }\n    })\n    return this\n  }\n\n  addSection(section: CardSection) {\n    this.card.addSection(section)\n    return this\n  }\n\n  addCardAction() {\n    return this\n  }\n\n  build() {\n    return this.card.build()\n  }\n\n  setName(name: string) {\n    this.card.setName(name)\n    return this\n  }\n\n  setHeader(cardHeader: CardHeader) {\n    this.card.setHeader(cardHeader)\n    return this\n  }\n}\n\nexport class CardSectionFactory implements ICardSectionWrapper {\n  data: ICardSectionData = {}\n  section: CardSection = CardService.newCardSection()\n\n  constructor(args?: ICardSectionData) {\n    this.data = {\n      header: \" \",\n      ...args,\n    }\n\n    if (typeof this.data.header === \"string\") {\n      this.section.setHeader(this.data.header)\n      pushy([\"state\", \"display.transient.card.section.header\"], this.data.header)\n    }\n\n  }\n\n  addWidget(widget: Widget) {\n    this.section.addWidget(widget)\n    return this\n  }\n\n  addWidgets(widgets: Widget[]) {\n    widgets.forEach((widget: Widget) => {\n      this.section.addWidget(widget)\n    })\n    return this\n  }\n\n  setCollapsible(value: boolean) {\n    this.section.setCollapsible(value)\n    return this\n  }\n\n  build() {\n    return this.section\n  }\n}\n\nexport class WidgetFactory {\n  newTextInput(data: IWidgetSuggestionsData) {\n    const widget = CardService.newTextInput()\n      .setFieldName(data.fieldName)\n      .setTitle(data.title)\n      .setHint(data.hint)\n\n    if (data.suggestions) {\n      widget.setSuggestionsAction(data.suggestions)\n    }\n    return widget\n  }\n\n  newSelectionInput(data: IWidgetSelectionData): SelectionInput {\n    const widget = CardService.newSelectionInput()\n      .setFieldName(data.fieldName)\n      .setTitle(data.title)\n\n    // @ts-ignore\n    if (data.type === \"DROPDOWN\") {\n      widget\n        .setType(CardService.SelectionInputType.DROPDOWN)\n    }\n\n    const items = data.items\n\n    items.forEach((item) => {\n      let isSelected = false\n      if (fetch(\"user\", \"temp_unit\") === item.value) {\n        isSelected = true\n      }\n      widget.addItem(item.text, item.value, isSelected)\n    })\n    return widget\n  }\n\n  newTextParagraph(data: {text: string}): TextParagraph {\n    return CardService.newTextParagraph()\n      .setText(data.text)\n  }\n\n  newTextButton(data: any): TextButton {\n    const widget = CardService.newTextButton()\n      .setText(data.text)\n\n    if (data.action) {\n      widget.setOnClickAction(data.action)\n    }\n    return widget\n  }\n\n  newKeyValue(data: any): KeyValue {\n    const widget = CardService.newKeyValue()\n      .setContent(data.content)\n\n    if (data.iconUrl) {\n      widget.setIconUrl(data.iconUrl)\n    }\n    //     if (data.icon) {\n    //       widget.setIcon(data.icon)\n    //     }\n    if (data.multiline) {\n      widget.setMultiline(data.multiline)\n    }\n    return widget\n  }\n\n  _TextInput(data: any): TextInput {\n    return this.newTextInput(data)\n  }\n\n  _SelectionInput(data: any): SelectionInput {\n    return this.newSelectionInput(data)\n  }\n\n  _Paragraph(data: any): TextParagraph {\n    return this.newTextParagraph(data)\n  }\n\n  _TextButton(data: any): TextButton {\n    return this.newTextButton(data)\n  }\n\n  _KeyValue(data: any): KeyValue {\n    return this.newKeyValue(data)\n  }\n}\n\ninterface IView {\n  route: string\n  data: {[prop: string]: string}\n}\n// @ts-ignore\nexport class View implements IView {\n  static route: string = \"\"\n  static data: {[prop: string]: string} = {}\n}\n","//     Copyright (C) 2018 Christopher David Ramos\nimport { render } from \"@/Handlers/Templates\"\n\nimport { CardSectionFactory, WidgetFactory } from \"@/Cards/Aux\"\nconst widgetFactory = new WidgetFactory()\n\nimport {BRAND} from \"@/Data/Dictionary\"\n//\nexport function DisclaimerSection(args = {}): CardSection {\n    const data = {\n        header: \"Acknowledgments\",\n    }\n    const cardSection = new CardSectionFactory(data)\n        .addWidget(widgetFactory._Paragraph({\n            text: render(\"userNotices\", {\n                license: BRAND.URLS.LICENSE,\n                nws: BRAND.URLS.NWS,\n                privacy: BRAND.URLS.PRIVACY,\n            }),\n        }))\n\n    // @ts-ignore\n    cardSection.addWidget(CardService.newImage().setAltText(\"A nice image\").setImageUrl(\"https://raw.githubusercontent.com/paxperscientiam/sparse-wx/us-flag/Img/Flag_of_the_United_States-50dpi.png\"))\n\n    return cardSection\n        .setCollapsible(true)\n        .build()\n}\n","//     Copyright (C) 2018 Christopher David Ramos\nimport { DisclaimerSection } from \"@/Cards/Main/Sections/Disclaimer\"\n\nimport { BaseCardController } from \"@/Controllers/BaseCardController\"\n\nexport class MainCardController extends BaseCardController  {\n    route: string = \"localityInfo\"\n    constructor() {\n        super()\n\n\n        this.card.addSection(DisclaimerSection())\n      this.card.setFixedFooter(CardService\n                               // @ts-ignore\n                                 .newFixedFooter()\n                                 .setPrimaryButton(\n                                     CardService\n                                         .newTextButton()\n                                         .setText(\"help\")\n                                         .setOpenLink(CardService.newOpenLink().setUrl(\"http://www.google.com\"))))\n    }\n}\n\n// export const MainCard = new MainCardController()\n\n// export function MainCard(): CardBuilder {\n//   const date = new DateArray()\n\n//   const userName = \"Valerie\"\n\n//   const greeting = (() => {\n//     if (!!userName) {\n//       return `${date.GREETING}, ${userName}!`\n//     } else {\n//       return `${date.GREETING}!`\n//     }\n//   })()\n\n//   const data = {\n//     image: \"\",\n//     name: \"mainCard\",\n//     subtitle: `Today is ${date.WEEKDAY}.`,\n//     title: greeting,\n//   }\n\n//   return new CardFactory(data).addSections([\n//     DisclaimerSection(),\n//   ])\n// }\n","//     Copyright (C) 2018 Christopher David Ramos\nexport function UserReturnHomeSection(): CardSection {\n    const COLORS = UI.PALETTE\n\n    const goToMainCardAction = CardService.newAction()\n        .setFunctionName(\"goToHomeCardCallback\")\n\n    return CardService.newCardSection()\n        .addWidget(CardService\n                   .newTextButton()\n                   .setText('<font color=\"${COLORS.ORANGE}\">HOME</font>')\n                   .setOnClickAction(goToMainCardAction))\n}\n","import { CardSectionFactory, WidgetFactory } from \"@/Cards/Aux\"\n\nimport {UserModel} from \"@/Models/UserModel\"\n\nexport function UserInputSection(): CardSection {\n  // const model = new UserModel()\n  // const isMint = model.isMint\n\n  const cardSection = new CardSectionFactory()\n  const widgetFactory = new WidgetFactory()\n\n  cardSection\n    .addWidget(widgetFactory._TextInput({\n      fieldName: \"user_name_key\",\n      hint: \"How should SparseWx address you? (25 character max)\",\n      title: \"Your Name (optional)\",\n    }))\n  return cardSection.setCollapsible(false).build()\n}\n","// Copyright (C) 2018 Christopher David Ramos\nexport class View {\n  static render(route: string, data: InputObject): string {\n    const templateBaseDir = \"src/Views/\"\n    const template = HtmlService.createTemplateFromFile(\n      `${templateBaseDir}${route}`)\n    // make sure not to pass undefined, null, or empty string to template engine\n    Object.keys(data).forEach((key) => {\n      if (data[key] == null) {\n        data[key] = \" \"\n      }\n    })\n    // @ts-ignore\n    template.data = data\n    return template.evaluate().getContent()\n  }\n}\n","import {fetch, push as pushy} from \"@/Data/PushPull\"\n\nexport class UserModel  {\n  private namespace: string = \"user\"\n\n  set name(name: string) {\n    pushy([this.namespace, \"name\"], name)\n  }\n  get name() {\n    return fetch(this.namespace, \"name\")\n  }\n\n  set address(address: string) {\n    pushy([this.namespace, \"address\"], address)\n  }\n  get address() {\n    return fetch(this.namespace, \"address\")\n  }\n\n  set zipcode(zip: string) {\n    pushy([this.namespace, \"zipcode\"], zip)\n  }\n  get zipcode() {\n    return fetch(this.namespace, \"zipcode\")\n  }\n\n  set country(country: string) {\n    pushy([this.namespace, \"country\"], country)\n  }\n  get country() {\n    return fetch(this.namespace, \"country\")\n  }\n\n  set isMint(bool: boolean) {\n    pushy([this.namespace, \"newuser\"], bool)\n  }\n  get isMint() {\n    return fetch(this.namespace, \"newuser\")\n  }\n\n  set temperatureUnit(unit: string) {\n    pushy([this.namespace, \"temperatureunit\"], unit)\n  }\n\n  get temperatureUnit() {\n    return fetch(this.namespace, \"temperatureunit\")\n  }\n}\n","//     Copyright (C) 2018 Christopher David Ramos\nimport { View } from \"@/Controllers/ViewsController\"\n\nimport { CardSectionFactory, WidgetFactory } from \"@/Cards/Aux\"\n\nimport {UserModel} from \"@/Models/UserModel\"\n\nexport function UserInfoSection(): CardSection {\n  const model = new UserModel()\n  const useraddress = model.address\n  const username = model.name\n  Logger.log(`username: ${username == \"\"}`)\n  Logger.log(`username: ${username == null}`)\n  Logger.log(`address: ${useraddress == \"\"}`)\n  Logger.log(`address: ${useraddress == null}`)\n\n  const textContent = View.render(\"userInfo\", {\n    useraddress,\n    username,\n  })\n\n  const widgetFactory = new WidgetFactory()\n\n  return new CardSectionFactory()\n    .addWidget(widgetFactory._Paragraph({\n      text: textContent,\n    }))\n    .build()\n}\n","import {UserInfoSection} from \"./Sections/UserInfo\"\nimport {UserInputSection} from \"./Sections/UserInput\"\nimport {UserReturnHomeSection} from \"./Sections/UserReturnHome\"\n\nexport {\n  UserInfoSection,\n  UserInputSection,\n  UserReturnHomeSection,\n}\n","import {fetch, push as pushy} from \"@/Data/PushPull\"\n\nexport class BaseCardModel {\n  namespace!: string\n\n  set name(name: string) {\n    pushy([this.namespace, \"card.name\"], name)\n  }\n  get name() {\n    return fetch(this.namespace, \"card.name\")\n  }\n\n  set title(title: string) {\n    pushy([this.namespace, \"header.title\"], title)\n  }\n  get title() {\n    return fetch(this.namespace, \"header.title\")\n  }\n\n  set subtitle(subtitle: string) {\n    pushy([this.namespace, \"header.subtitle\"], subtitle)\n  }\n  get subtitle() {\n    return fetch(this.namespace, \"header.subtitle\")\n  }\n}\n","import {fetch, push as pushy} from \"@/Data/PushPull\"\n\ninterface LooseObject {\n  namespace: string\n  [key: string]: any\n  data: any\n}\n\nexport class GenericModel implements LooseObject {\n  namespace!: string\n\n  set data(args: [string, any]) {\n    pushy([this.namespace, args[0]], args[1])\n  }\n\n  get data() {\n    return fetch(this.namespace)\n  }\n}\n","//     Copyright (C) 2018 Christopher David Ramos\n\nexport function formatDateService(date: Date, format = \"E, d MMM y\") {\n  return Utilities.formatDate(new Date(date), getUserTimeZone(), format)\n}\n\nexport function formatTimeService(date: Date) {\n  return Utilities.formatDate(new Date(date), getUserTimeZone(), \"h:mm a\")\n}\n\nexport class DateArray {\n  HOUR: number\n  WEEKDAY: string\n  WEEK_DAY: string\n  MONTH: string\n  TIME: string\n  GREETING: string\n\n  constructor() {\n    const timeZone = getUserTimeZone()\n    const date = new Date()\n\n    this.HOUR = Number(Utilities.formatDate(date, timeZone, \"H\"))\n    this.WEEKDAY = Utilities.formatDate(date, timeZone, \"EEEE\")\n    this.WEEK_DAY = this.WEEKDAY\n    this.MONTH = Utilities.formatDate(date, timeZone, \"MMMM\")\n    this.TIME = Utilities.formatDate(date, timeZone, \"h:mm a\")\n\n    if (this.HOUR >= 0 && this.HOUR < 12 ) {\n      // this.GREETING = Translate(\"Good morning\")\n      this.GREETING = \"Good morning\"\n    } else if (this.HOUR >= 12 && this.HOUR < 18) {\n      // this.GREETING = Translate(\"Good afternoon\")\n      this.GREETING = \"Good afternoon\"\n    } else {\n      // this.GREETING = Translate(\"Good evening\")\n      this.GREETING = \"Good evening\"\n    }\n  }\n}\n\nexport function timeConversion(millisec: number) {\n  // https://stackoverflow.com/a/32180863\n  const seconds = Math.round((millisec / 1000))\n\n  const minutes = Math.round((millisec / (1000 * 60)))\n\n  const hours = Math.round((millisec / (1000 * 60 * 60)))\n\n  const days = Math.round((millisec / (1000 * 60 * 60 * 24)))\n\n  if (seconds < 60) {\n    return seconds + \" Seconds\"\n  } else if (minutes < 60) {\n    return minutes + \" Minutes\"\n  } else if (hours < 24) {\n    return hours + \" Hours\"\n  } else {\n    return days + \" Days\"\n  }\n}\n\nexport function formatAge(date: any) {\n  const msgDate = new Date(date).getTime()\n  const todayDate = Date.now() // milliseconds\n  const age = timeConversion(todayDate - msgDate)\n  return age\n}\n//\nexport function getUserTimeZone() {\n  return CalendarApp.getDefaultCalendar().getTimeZone()\n}\n\nexport function convertC2F(temperature: number) {\n  return (temperature * (9 / 5) + 32).toFixed(0)\n}\n\nexport function convertF2C(temperature: number) {\n  return ((temperature - 32) * 5 / 9).toFixed(0)\n}\n// export function diffDate(newDate, oldDate) {\n//   // expects date objects\n// }\n\nexport function timeStamp()  {\n  return (new Date()).toTimeString().slice(0, 8)\n}\n","import {BaseCardModel} from \"@/Models/BaseCardModel\"\n\nimport { DateArray } from \"@/Utilities/Date\"\nconst da = new DateArray()\n\nexport class MainCardModel extends BaseCardModel {\n    namespace: string = \"MainCardState\"\n\n    name: string = \"maincard\"\n\n    constructor() {\n        super()\n        this.title = `${da.GREETING}!`\n        this.subtitle = `Today is ${da.WEEKDAY}`\n    }\n}\n","import {BaseCardModel} from \"@/Models\"\n\nexport class UserCardModel extends BaseCardModel {\n  namespace: string = \"UserCardState\"\n\n  name: string = \"usercard\"\n\n  constructor() {\n    super()\n    this.title = \"Settings\"\n    this.subtitle = \" \"\n  }\n}\n","import {BaseCardModel} from \"@/Models/BaseCardModel\"\nimport {GenericModel} from \"@/Models/GenericModel\"\nimport {MainCardModel} from \"@/Models/MainCardModel\"\nimport {UserCardModel} from \"@/Models/UserCardModel\"\nimport {UserModel} from \"@/Models/UserModel\"\n\nexport {\n  BaseCardModel,\n  GenericModel,\n  MainCardModel,\n  UserModel,\n  UserCardModel,\n}\n","import {fetch, push as pushy} from \"@/Data/PushPull\"\n\nexport class ApplicationModel {\n  namespace: string = \"ApplicationState\"\n  // private _inputTemperatureUnit: string = \"F\"\n\n  constructor() {\n    pushy([this.namespace, \"application.input.temperatureUnit.options\"], \"dropdown_item_f, dropdown_item_c\")\n  }\n\n  // submitted address\n  set address(address: string) {\n    pushy([this.namespace, \"application.input.user_address_key\"], address)\n  }\n  get address() {\n    return fetch(this.namespace, \"application.input.user_address_key\")\n  }\n\n  set isMint(bool: boolean) {\n    pushy([this.namespace, \"application.mint\"], bool)\n  }\n  get isMint() {\n    return fetch(this.namespace, \"application.mint\")\n  }\n\n  set isUserNameValid(bool: boolean) {\n    pushy([this.namespace, \"application.valid.username\"], bool)\n  }\n  get isUserNameValid() {\n    return fetch(this.namespace, \"application.valid.username\")\n  }\n\n  set isAddressValid(bool: boolean) {\n     pushy([this.namespace, \"application.valid.address\"], bool)\n  }\n  get isAddressValid() {\n     return fetch(this.namespace, \"application.valid.address\")\n  }\n\n  // set inputTemperatureUnit(unit: string) {\n  //   push([this.namespace, \"application.input.temperatureUnit.values\"], \"dropdown_item_f, dropdown_item_c\")\n  // }\n}\n","//     Copyright (C) 2018 Christopher David Ramos\nimport { timeStamp } from \"@/Utilities/Date\"\n\nimport {\n  GoogleGeoCodeInterface,\n  PROPS,\n} from \"@/Data/Dictionary\"\n\nimport {push as pushy} from \"@/Data/PushPull\"\n// @ts-ignore\nexport function checkLocationServiceStatus() {\n  // simply tests if service returns a good result\n  const result: IGeocodeSR = Maps.newGeocoder().geocode(\"10011\")\n  Logger.log(`[${timeStamp()}][locationServiceStatus] ${result.status}`)\n  pushy([\"state\", \"status.location\"] , result.status)\n  return result.status\n}\n\n// function getCoordinatesFromAddressService(address: string) {\n//   const response = Maps.newGeocoder().geocode(address)\n//     .results\n\n//   const result =  {\n//     lat: response[0].geometry.location.lat.toFixed(4),\n//     lon: response[0].geometry.location.lng.toFixed(4),\n//   }\n//   result.coo = result.lat + \",\" + result.lon\n\n//   return result\n// }\n\nexport function processGeocoderResultsService(polity: IData, geometry: IData) {\n  const GeoInterface = GoogleGeoCodeInterface\n\n  const lon = geometry.location.lng.toFixed(4)\n  const lat = geometry.location.lat.toFixed(4)\n  const coordinate = lat + \",\" + lon\n\n  const localeKeys = Object.keys(PROPS.userLocale)\n  localeKeys.forEach((key) => {\n    pushy([\"user\", key] , null)\n  })\n\n  pushy([\"polity\"], polity)\n\n  polity.forEach((pol: IData) => {\n    if (pol.types.indexOf(GeoInterface.CITY) > -1) {\n      pushy([\"user\", \"city\"], pol.short_name)\n    }\n    if (pol.types.indexOf(GeoInterface.STATE) > -1) {\n      pushy([\"user\", \"state\"], pol.short_name)\n      pushy([\"user\", \"state_long\"], pol.long_name)\n    }\n    if (pol.types.indexOf(GeoInterface.COUNTY) > -1) {\n      pushy([\"user\", \"county\"], pol.short_name)\n    }\n    if (pol.types.indexOf(GeoInterface.COUNTRY) > -1) {\n      pushy([\"user\", \"country\"], pol.long_name)\n    }\n    if (pol.types.indexOf(GeoInterface.ZIP_CODE) > -1) {\n      pushy([\"user\", \"zip_code\"], pol.long_name)\n    }\n  })\n\n  pushy([\"user\", \"lat\"], lat)\n  pushy([\"user\", \"lon\"], lon)\n  pushy([\"user\", \"coordinate\"], coordinate)\n\n  Logger.log(`[${timeStamp()}][lon] ${lon}`)\n  Logger.log(`[${timeStamp()}][lat] ${lat}`)\n  Logger.log(`[${timeStamp()}][coordinate] ${coordinate}`)\n}\n","//     Copyright (C) 2018 Christopher David Ramos\nexport function JsonResponseHandler(url: string,\n                                    query = {},\n                                    params: URLFetchRequestOptions = {muteHttpExceptions: true}): IJsonResponseHandler {\n\n  const data = {\n    \"@context\": [ \"JsonResponseHandler\" ],\n    params,\n    query,\n    url,\n  }\n\n  const objJsonHandlerMethods = {\n    fetch() {\n      const response = UrlFetchApp.fetch(data.url , data.params) as HTTPResponse\n      const json = response.getContentText()\n      const responseData = JSON.parse(json)\n      return {\n        \"@context\": [ \"JsonResponseHandler\" ,\n                      {\n          method: \"fetch\",\n        }],\n        \"data\": responseData,\n        \"status\": [ true, \"Things are OK.\" ],\n      }\n    },\n  }\n\n  const obj = Object.create(objJsonHandlerMethods)\n  obj.data = data\n\n  return obj\n}\n","//     Copyright (C) 2018 Christopher David Ramos\n\nexport const NWSUrlService = {\n    uri: {\n        base: \"https://api.weather.gov/\",\n\n        alerts: {\n            active: \"alerts/active\",\n        },\n    },\n\n    getMetaLink(coordinates: string): string {\n        return `${this.uri.base}points/${coordinates}`\n    },\n}\n\n// interface INWSUrlService {\n// }\n\n// export class NWSUrlService {\n//   NWS_INTERFACE\n//   API: any\n//   URL_BASE: string\n//   alerts: string\n//   activeAlerts: string\n\n//   constructor() {\n//     this.NWS_INTERFACE = dictionary.INTERFACE.NationalWeatherServiceInterface\n//     this.API = this.NWS_INTERFACE.API\n\n//     this.URL_BASE = this.API._\n\n//     this.alerts = `${this.URL_BASE}${this.API.ALERTS._}`\n\n//     this.activeAlerts = `${this.URL_BASE}${this.API.ALERTS.ACTIVE}`\n\n//   }\n\n//   meta(coordinates: string) {\n//     /// points/{point}\n//     return `${this.URL_BASE}${this.API.POINTS._}/${coordinates}`\n//   }\n\n//   forecast(wfo: string, gridpoints: string) {\n//     let url = `${this.URL_BASE}${this.API.GRID_POINTS.FORECAST._}`\n//     url = url.replace(/@wfo/i, wfo)\n//     url = url.replace(/@xy/i, gridpoints)\n//     return url\n//   }\n\n//   zoneAlerts(zoneid: string) {\n//     // note that zone is county id which comes from meta.properties.county\n//     // eg https://api.weather.gov/alerts/active/zone/VTC007\n//     return `${this.URL_BASE}${this.API.ALERTS.ACTIVE}/zone/${zoneid}`\n//   }\n// }\n// //\n// //\n// // function _nwsUrlHandlerTest_metaUrlFromCoord() {\n// //   const coordinates = \"44.4759,-73.2121\"\n// //   const a = new NWSUrlService()\n// //   const b = a.meta\n// //   const c = b(coordinates); Logger.log(c)\n// //   return c\n// // }\n// //\n// // function _nwsUrlHandlerTest__forecastUrlFromCoord() {\n// //   const coordinates = \"44.4759,-73.2121\"\n// //   const a = new NWSUrlService()\n// //   const b = a.meta\n// //   const metaUrl = b(coordinates)\n\n// //   const forecastUrl = a._forecastUrlFromCoord(metaUrl); Logger.log(forecastUrl)\n// //   return forecastUrl\n// // }\n// // //\n// // function _nwsUrlHandlerTest_forecastUrlFromCoord() {\n// //   const coordinates = \"44.4759,-73.2121\"\n// //   const a = new NWSUrlService(); Logger.log(a)\n// //   const b = a.forecastUrlFromCoord; Logger.log(b)\n// //   const c = b(coordinates); Logger.log(c)\n// // }\n","import {fetch, push as pushy} from \"@/Data/PushPull\"\n\nexport function _Cache(fn: (args?: any) => any,\n                       fnArgs: [\"\"],\n                       cacheName: string,\n                       cacheTime = 1500): ICacheWrapper {\n    const objCacheMethodsBuilder = Object.create({\n      data: {},\n    }) as ICacheWrapper\n\n    const cache = CacheService.getUserCache()\n    objCacheMethodsBuilder.data.cache = cache\n    const cached = objCacheMethodsBuilder.data.cache.get(cacheName)\n    objCacheMethodsBuilder.data.cached = cached\n\n    let result\n    let message\n    let hits = fetch(\"state\", \"cache.hits\")\n\n    if (!!cached) {\n        result = cached\n        message = \"Cache found\"\n        ++hits\n        pushy([\"state\", \"cache.hits\"], hits)\n    } else {\n        if (fnArgs != null) {\n            result = fn(...fnArgs)\n        } else {\n            result = fn()\n        }\n        cache.put(cacheName, result, cacheTime)\n        message = \"Not found. Cached.\"\n    }\n\n    pushy([\"state\", `cache.${cacheName}`], message)\n\n    objCacheMethodsBuilder.data = {\n      // @ts-ignore\n        \"@context\": [ \"cacheHandler\" ],\n        cache,\n        cacheName,\n        cached,\n        message,\n        result,\n    }\n\n    objCacheMethodsBuilder.invalidate = () => {\n        if (cached != null) {\n            objCacheMethodsBuilder.data.cachedName = null\n            return true\n        }\n        return false\n    }\n\n    objCacheMethodsBuilder.getResult = () => {\n        return {\n            \"@context\": [ \"cacheHandler\", {\n                method: \"getResult\",\n            }],\n            \"cacheData\": objCacheMethodsBuilder.data.result,\n            \"cacheName\": objCacheMethodsBuilder.data.cachedName,\n            \"cacheStatus\": [true, objCacheMethodsBuilder.data.message],\n        }\n    }\n\n    return objCacheMethodsBuilder\n}\n","//     Copyright (C) 2018 Christopher David Ramos\n\nimport {fetch, push as pushy} from \"@/Data/PushPull\"\n\nimport {\n  HTTP,\n} from \"@/Data/Dictionary\"\n\nimport {_Cache} from \"@/Handlers/Aux\"\n\nimport dlv from \"@paxperscientiam/dlv.ts\"\n\nimport { JsonResponseHandler } from \"@/Handlers/JsonResponse\"\n\nimport { NWSUrlService } from \"@/Handlers/nwsUrlHandlers\"\n\nimport { timeConversion, timeStamp } from \"@/Utilities/Date\"\n\nfunction nwsMetaLocationData() {\n  //  const WX = PROPS.WX\n\n  const lat = Number(fetch(\"user\", \"lat\")).toFixed(4)\n  const lon = Number(fetch(\"user\", \"lon\")).toFixed(4)\n  const coord = `${lat},${lon}`\n\n  Logger.log(`[${timeStamp()}][coord] ${coord}`)\n\n  const urlForMeta = NWSUrlService.getMetaLink(coord)\n\n  Logger.log(`[${timeStamp()}][urlForMeta] ${urlForMeta}`)\n\n  const params = HTTP.WX_SERVICE.PARAMS\n  const preWxRaw = JsonResponseHandler(urlForMeta, {}, params)\n  const wxRaw = _Cache(preWxRaw.fetch.bind(preWxRaw), [\"\"], \"wxRaw\", 0)\n  return wxRaw.getResult()\n}\n\nexport function getWeatherServiceDataService() {\n  const obj = Object.create({})\n  const wxResponse = nwsMetaLocationData()\n\n  obj.status = []\n\n  // obj.push(wxResponse.cacheStatus)\n\n  if (wxResponse.cacheData != null) {\n    pushy([\"state\", \"cache.wx.meta\"], \"not found\")\n    obj.status.push([true, \"metadata result found in cache\"])\n  } else {\n    pushy([\"state\", \"cache.wx.meta\"], \"found\")\n    obj.status.push([false, \"metadata not found in cache!\"])\n    return obj\n  }\n\n  if (dlv(wxResponse, \"cacheData.data.properties\") == null) {\n    pushy([\"state\", \"cache.wx.meta.properties\"], \"meta\")\n    Logger.log(\"wxResponse does not contain wx properties\")\n    obj.status.push([false, \"wxUrl fail\"])\n    return obj\n  }\n\n  const timeZone = dlv(wxResponse, \".data.properties.timeZone\")\n  pushy([\"wx\", \"timeZone\"], timeZone)\n\n  const wxUrl = dlv(wxResponse, \"cacheData.data.properties.forecast\")\n\n  if (wxUrl != null) {\n    pushy([\"state\", \"service.wx.meta.forecastUrl\"], wxUrl)\n    obj.status.push([true, `wxUrl: ${wxUrl}`])\n  } else {\n    pushy([\"state\", \"service.wx.meta.forecastUrl\"], undefined)\n    obj.status.push([false, \"wxUrl is undefined!\"])\n    return obj\n  }\n\n  const params = HTTP.WX_SERVICE.PARAMS\n  const preWxRaw = JsonResponseHandler(wxUrl, {}, params)\n\n  const fetchResponse = _Cache(preWxRaw.fetch.bind(preWxRaw), [\"\"], \"wxRawForecast\", 0).getResult()\n\n  if (fetchResponse.cacheStatus != null) {\n    pushy([\"state\", \"cache.wx\"], \"cached\")\n    Logger.log(`wx dump response found in cache`)\n    obj.status.push([true, `wx dump response found in cache`])\n  } else {\n    pushy([\"state\", \"cache.wx\"], \"not cached\")\n    Logger.log( \"wx dump NOT found in cache!\")\n    obj.status.push([false, \"wx dump NOT found in cache!\"])\n    return obj\n  }\n\n  obj.wx = dlv(fetchResponse, \"cacheData.data\")\n\n  //  obj.timeZone = wx.properties.timeZone\n\n  if (dlv(obj, \"wx.properties\") == null) {\n    obj.status.push([false, \"mo wx data from site!\"])\n    return obj\n  }\n\n  obj.updateTime = dlv(obj.wx, \"properties.updateTime\")\n  pushy([\"wx\", \"updateTime\"], obj.updateTime)\n\n  obj.elevation = dlv(obj.wx, \"properties.elevation\")\n  pushy([\"wx\", \"elevation\"], obj.elevation)\n\n  const wxPeriodCounts = dlv(obj.wx, \"properties.periods\")\n\n  if (!!wxPeriodCounts) {\n    obj.wxPeriodCount = wxPeriodCounts.length\n  }\n\n  obj.getPeriod = (period: string): InputObject => {\n    const periodic: IData = obj.wx.properties.periods[period]\n    pushy([\"state\", \"display.wx.data.period\"], period)\n    const response = {\n      condition: periodic.shortForecast.toLowerCase(),\n      status: [true, \"wx is good\"],\n\n      iconUrl: periodic.icon,\n\n      isDaytime: periodic.isDaytime,\n      name: periodic.name,\n      temp: periodic.temperature,\n      unit: periodic.temperatureUnit,\n      windDirection: periodic.windDirection,\n      windSpeed: periodic.windSpeed,\n\n      cwa: obj.wx.properties.cwa,\n      cwaUrl: \"https://www.weather.gov/\",\n      updateTime: obj.wx.properties.updateTime,\n    }\n    return response\n  }\n  return obj\n}\n\nexport function checkWeatherServiceStatus() {\n  const urlWxServiceCheck = NWSUrlService.uri.base\n\n  const params = HTTP.WX_SERVICE.PARAMS\n  let result: any\n  try {\n    result = JsonResponseHandler(urlWxServiceCheck, {}, params).fetch()\n  } catch (e) {\n    pushy([\"state\", \"status.wx\"], \"ERR\")\n    Logger.log(`checkWeatherServiceStatus: ${e}`)\n    return \"ERR\"\n  }\n\n  Logger.log(`[${timeStamp()}][wxServiceStatus] ${result.data.status}`)\n  const status = dlv(result, \"data.status\")\n  pushy([\"state\", \"status.wx\"], status)\n  return status\n}\n\nexport function getForecastStalenessService() {\n  const lastUpdateTime = fetch(\"wx\", \"updateTime\")\n  let diff: any\n  if (!!lastUpdateTime) {\n    diff = Date.now() - (new Date(lastUpdateTime)).getTime()\n    diff = timeConversion(diff)\n    pushy([\"wx\", \"forecastAge\"], diff)\n    return [true, diff]\n  }\n  return [false, \"unknown\"]\n}\n\nexport function getAlertsByStateService() {\n  const params = HTTP.WX_SERVICE.PARAMS\n  const userstate = fetch(\"user\", \"state\")\n\n  const urlWxAlerts = `https://api.weather.gov/alerts/active/count`\n\n  let response: any\n  let count: any\n\n  if (!!userstate) {\n    response = JsonResponseHandler(urlWxAlerts, {}, params).fetch().data\n    count = (response.areas[userstate])\n    if (count != null) {\n      count = count.toFixed(0)\n      pushy([\"state\", \"service.wx.alerts\"], true)\n      return [true, count]\n    }\n    pushy([\"state\", \"service.wx.alerts\"], false)\n    return [false, \"0 alerts\"]\n  }\n  pushy([\"state\", \"service.wx.alerts\"], \"ERR\")\n  return [false, \"ERR\"]\n}\n","export function isHoldayService(dayName: string): boolean {\n    const days = [\n        /Tonight/i,\n        /Sunday/i,\n        /Monday/i,\n        /Tuesday/i,\n        /Wednesday/i,\n        /Thursday/i,\n        /Friday/i,\n        /Saturday/i,\n    ]\n\n    return true !== days.some((rx) => rx.test(dayName))\n}\n","//     Copyright (C) 2018 Christopher David Ramos\nimport {fetch} from \"@/Data/PushPull\"\n\nexport function apparentTemperatureService(args: InputObject): null|string {\n  let temperature\n  let windspeed\n  let tempUnit\n\n  tempUnit = fetch(\"user\", \"temp_unit\")\n  // Temperature in F and windspeed in MPH\n  // https://www.weather.gov/safety/cold-faqs\n  // Windchill (ºF) = 35.74 + 0.6215T - 35.75(V^0.16) + 0.4275T(V^0.16)\n\n  if (!args.temperature || !args.windspeed) {\n    return null\n  }\n\n  temperature = Number(args.temperature)\n  windspeed = Number(args.windspeed)\n\n  if (tempUnit === \"dropdown_item_f\") {\n    if (temperature <= 50 && windspeed > 3) {\n      const windchill = 35.74\n        + (0.6215 * temperature)\n        - (35.75 * Math.pow(windspeed, 0.16))\n        + (0.4275 * temperature * Math.pow(windspeed, 0.16))\n\n      return parseInt(windchill.toString(), 10).toFixed(0)\n    }\n    return null\n  }\n\n  if (tempUnit === \"dropdown_item_c\") {\n    if (temperature <= 10 && windspeed > 4.8) {\n      // convert windspeed to KPM (making an assumption)\n      windspeed *= 1.61\n      const windchill = 13.12\n        + (0.6125 * temperature)\n        - (11.37 * Math.pow(windspeed, 0.16))\n        + (0.3965 * Math.pow(windspeed, 0.16))\n      return parseInt(windchill.toString(), 10).toFixed(0)\n    }\n    return null\n  }\n\n  //   if (temperature !=null && relativeHumidity != null) {\n  //         // temperature in F and relativeHumidty in percentage points\n  //         temperature = Number(temperature)\n  //         relativeHumidity = Number(relativeHumidity)\n\n  //         if (temperature >= 80 && relativeHumidity >= 40) {\n  //             return _calculateHeadIndexService(temperature,\n  //                                               relativeHumidity)\n  //         }\n  //     }\n  return null\n}\n\n// function _calculateHeadIndexService(temperature, RH) {\n//     // https://www.weather.gov/ama/heatindex\n//     const heatIndex =\n//         -42.379\n//         + (2.04901523 * temperature)\n//         + (10.14333127 * RH)\n//         - (0.22475541 * temperature * RH)\n//         - (Math.pow(6.83783, -3) * Math.pow(temperature, 2))\n//         - (Math.pow(5.481717, -2) * Math.pow(RH, 2))\n//         + (Math.pow(1.22874, -3) * Math.pow(temperature, 2) * RH)\n//         + (Math.pow(8.5282, -4) * temperature * Math.pow(RH, 2))\n//         - (Math.pow(1.99, -6) * Math.pow(temperature, 2) * Math.pow(RH, 2))\n\n//     Logger.log(\"Apparent temp is Heat Index\")\n//     return heatIndex\n// }\n\n// function apparentTempTest() {\n//     const x = apparentTemperatureService({ temperature: 100, relativeHumidity: 50 })\n//     Logger.log(x)\n// }\n","import { convertF2C } from \"@/Utilities/Date\"\n\nimport {fetch} from \"@/Data/PushPull\"\n\nimport {PALETTE} from \"@/Data/Dictionary\"\n\nexport function textColorTemperatureService(temperature: number): string {\n    let temp: string = \"\"\n\n    if (fetch(\"user\", \"temp_unit\") === \"dropdown_item_c\") {\n        temp = convertF2C(temperature)\n    }\n\n    if (temperature < 32 ) {\n        Logger.log(`Blue for ${temperature}`)\n        return PALETTE.BLUE\n    }\n\n    if (temperature > 75 ) {\n        Logger.log(`Maroon for ${temperature}`)\n        return PALETTE.MAROON\n    }\n\n    if (temperature > 100 ) {\n        Logger.log(`Orange for ${temperature}`)\n        return PALETTE.ORANGE\n    }\n\n    return \"BLACK\"\n}\n","//     Copyright (C) 2018 Christopher David Ramos\n\nimport { timeStamp } from \"@/Utilities/Date\"\n\nimport {fetch, push as pushy} from \"@/Data/PushPull\"\n\nexport function checkUserServiceStatus(): string {\n  const lat = fetch(\"user\", \"lat\")\n  if (!lat) {\n    Logger.log(`[${timeStamp()}][status.user] ERR as no coordinates`)\n    pushy([\"state\", \"status.user\"], \"ERR\")\n    return \"ERR\"\n  }\n  Logger.log(`[${timeStamp()}][status.user] OK`)\n  pushy([\"state\", \"status.user\"], \"OK\")\n  return \"OK\"\n}\n","//     Copyright (C) 2018 Christopher David Ramos\nexport * from \"@/Services/Location\"\n\nexport * from \"@/Services/Weather\"\n\nexport * from \"@/Services/ComputeApparentTemperatureService\"\n\nexport * from \"@/Services/IsColdService\"\n\nexport * from \"@/Services/HighlightHolidayService\"\n\nexport * from \"@/Services/Location\"\n\nexport * from \"@/Services/User\"\n\nexport * from \"@/Services/Weather\"\n\n// export *  { checkLocationServiceStatus } from \"@/Services/Location\"\n\n// import { checkWeatherServiceStatus, WeatherIconService } from \"@/Services/Weather\"\n\n// import { apparentTemperatureService } from \"@/Services/ComputeApparentTemperatureService\"\n//\n// import { textColorTemperatureService } from \"@/Services/IsColdService\"\n\n// import { isHoldayService } from \"@/Services/HighlightHolidayService\"\n\n// import { processGeocoderResultsService } from \"@/Services/Location\"\n\n// import { checkUserServiceStatus } from \"@/Services/User\"\n\n// import {\n//   getAlertsByStateService,\n//   getForecastStalenessService,\n//   getWeatherServiceDataService,\n// } from \"@/Services/Weather\"\n\n// export {\n//   apparentTemperatureService,\n\n//   checkLocationServiceStatus,\n\n//   checkUserServiceStatus,\n\n//   checkWeatherServiceStatus,\n//   WeatherIconService,\n\n//   getAlertsByStateService,\n//   getForecastStalenessService,\n//   getWeatherServiceDataService,\n\n//   isHoldayService,\n\n//   processGeocoderResultsService,\n\n//   textColorTemperatureService,\n// }\n","//     Copyright (C) 2018 Christopher David Ramos\ndeclare const Application: ISparseWx\n\nimport { processGeocoderResultsService } from \"@/Services\"\n\nimport {\n  APPROVED_POLITIES,\n  INTERFACE,\n  PROPS,\n} from \"@/Data/Dictionary\"\n\nimport { UserModel } from \"@/Models/UserModel\"\n\nexport function validateUserName(input: string = \"\") {\n  if (input == \"\") {\n    return [true]\n  }\n\n  if (/^.{1,26}$/i.test(input)) {\n    // test for length\n    return [true, {message: \"Nice name.\"}]\n  }\n\n  return [\n    false,\n    {\n      message: \"!!! Your name cannot be longer than 26 characters.\",\n    },\n  ]\n}\n\n// // tslint:disable-next-line:max-line-length\n// const isLatin = /^[0-9a-zA-Z\\u00C0-\\u024F\\u1E00-\\u1EFF\\s,\\.'\\?\\\\!-]{2,25}$/i.test(input)\n// if (!isLatin) {\n//   return [false, {message: \"Sorry, try another name\"}]\n// }\n\n// return [true, {message: \"OK\"}]\n// //    return isLatin\n// //         let isCJK = /[\\u4e00-\\u9fa5 -]/.test(input)\n// //     isCJK = true\n// //     // https://stackoverflow.com/a/2385967\n// //    //  if (isLatin || isCJK) {\n// //     //         return true\n// //     //     }\n// //     //     return false;\n// }\n\nexport function validateZIP(input: string) {\n  // https://www.oreilly.com/library/view/regular-expressions-cookbook/9781449327453/ch04s14.html\n  return /^[0-9]{5}(?:-[0-9]{4})?$/.test(input)\n}\n\nexport function validateMailingAddress(address: string) {\n  const userModel = new UserModel()\n  // https://developers.google.com/maps/documentation/javascript/geocoding#GeocodingAddressTypes\n  if (address == null) {\n    return [false, \"No valid address.\"]\n  }\n  const GeoInterface = INTERFACE.GoogleGeoCodeInterface\n\n  const response: IGeocodeSR = Maps.newGeocoder()\n    .setRegion(\"us\")\n    .geocode(address)\n  if (response.status === \"ZERO_RESULTS\") {\n    return [false, \"ZERO_RESULTS\"]\n  }\n\n  const result = response.results[0]\n  const polity = result.address_components\n\n  const approvedPolities = Object.keys(APPROVED_POLITIES)\n\n  polity.forEach((pol: IData) => {\n    if (pol.types.indexOf(GeoInterface.COUNTRY) > -1) {\n      userModel.country = pol.long_name\n    }\n  })\n\n  const strPolity = userModel.country\n  //const isApprovedPolity = approvedPolities.indexOf(strPolity) > -1\n  const isApprovedPolity = (strPolity === \"United States\");\n\n  if (!isApprovedPolity) {\n    globalThis.userProperties.deleteProperty(PROPS.userLocale.country)\n    return [false, \"UNSUPPORTED_REGION\"]\n  }\n\n  Logger.log(`The polity ${strPolity} is approved: ${isApprovedPolity}`)\n\n  // stores approved data\n  processGeocoderResultsService(polity, result.geometry)\n\n//  const lastAddressResult = userModel.address\n  //  const lastAddressResult2 = user.fetch(\"suggested_address_two\").response\n\n  // if (lastAddressResult != null) {\n  //   pushy([\"user\", \"suggested_address_two\"],  lastAddressResult)\n  // }\n  // pushy([\"user\", \"address\"], result.formatted_address)\n  //\n  return [true]\n}\n","//     Copyright (C) 2018 Christopher David Ramos\nimport { validateMailingAddress, validateUserName } from \"@/Utilities/Validate\"\n\nimport {BRAND} from \"@/Data/Dictionary\"\n\n// import { ResetWidget } from \"@/Cards/Main/Widgets/Reset\"\n\nimport { MainCardModel } from \"@/Models\"\n\nimport {MainCardController} from \"@/Controllers\"\n\nimport { CardSectionFactory, WidgetFactory} from \"@/Cards/Aux\"\n\nimport {UserModel} from \"@/Models\"\nimport {ApplicationModel} from \"@/Models/ApplicationModel\"\n\n// @ts-ignore\nfunction submitNameCallback(e: any): boolean {\n  const userModel = new UserModel()\n  const applicationModel = new ApplicationModel()\n\n  const name = e.formInput.user_name_key\n\n  const isUserNameValid = validateUserName(name)\n\n  if (isUserNameValid[0]) {\n    applicationModel.isUserNameValid = true\n    applicationModel.isMint = false\n    userModel.name = name\n    return true\n  } else {\n    applicationModel.isUserNameValid = false\n    throw new Error(\"bad name\")\n  }\n}\n\nglobalThis.submitAddressCallback = (e: any): boolean => {\n  const applicationModel = new ApplicationModel()\n  const userModel = new UserModel()\n\n  const address = e.formInput.user_address_key\n  // @test\n  applicationModel.address = address\n\n  const storedAddress = userModel.address\n\n  if (!address && !storedAddress) {\n    throw new Error(\"First time? You'll need to set an address\")\n  } else if (!address) {\n    // false means don't process\n    return false\n  }\n\n  Logger.log(`Submitted address is ${address}`)\n\n  const isValid = validateMailingAddress(address)\n  // if valid, retrieve address from storage\n  if (isValid[0]) {\n    applicationModel.isAddressValid = true\n    applicationModel.isMint = false\n\n    //  const cache = CacheService.getUserCache()\n    // cache.removeAll([\"wxRaw\", \"wxRawForecast\"])\n    // successful validation means that lon,lat, and address properties defined\n    return true\n  } else {\n    const response = \"Sorry, try a different address.\"\n    if (isValid[1] === \"ZERO_RESULTS\") {\n      applicationModel.address = \"ZERO_RESULTS\"\n      throw new Error(\"Sorry, that address wasn't found. Try something else.\")\n    }\n\n    if (isValid[1] === \"UNSUPPORTED_REGION\") {\n      applicationModel.address =  \"UNSUPPORTED_REGION\"\n      throw new Error(`Sorry, ${BRAND.NAME} only supports results for the USA.`)\n    }\n    applicationModel.address = \"ERR\"\n    throw new Error(response)\n  }\n}\n\nglobalThis.submitTemperatureUnitCallback = (e: any) => {\n  const userModel = new UserModel()\n\n  const chosenTempUnit = e.formInputs.temperature_unit_list[0]\n\n  const currentTempUnit = e.temp_unit\n\n  if (currentTempUnit === chosenTempUnit) {\n    return false\n  }\n\n  if (!chosenTempUnit || chosenTempUnit === \"\") {\n    return false\n  }\n\n  userModel.temperatureUnit = chosenTempUnit\n  return true\n}\n\nglobalThis.getAddressSuggestionsCallback = () => {\n  Logger.log(\"Address suggestions callback ... called\")\n  // will use recent entries\n  const suggestions = CardService.newSuggestions()\n\n  const arrSuggestionsTemp = [\n    user.suggested_address_one,\n    user.suggested_address_two,\n    user.suggested_address_three,\n  ]\n\n  // arrSuggestionsTemp.forEach((element) => {\n  //     if (element != null) {\n  //       suggestions.addSuggestion(element)\n  //     }\n  //   })\n  suggestions\n    .addSuggestion(\"one\")\n    .addSuggestion(\"two\")\n    .addSuggestion(\"three\")\n\n  return CardService.newSuggestionsResponseBuilder()\n    .setSuggestions(suggestions)\n    .build()\n}\n\nglobalThis.processUserPreferencesFormCallback = (e: any): ActionResponse => {\n  Logger.log(\"processUserPreferencesFormCallback ... \")\n  const model = new MainCardModel()\n  const mainCard = new MainCardController()\n  //\n  mainCard.bindingContext(model)\n\n  let shouldProcess = false\n  let notification = \"\"\n\n  try {\n    const isNameChanged = submitNameCallback(e)\n    // @ts-ignore\n    shouldProcess = shouldProcess || isNameChanged\n    if (isNameChanged) {\n      notification = \"Name set. \"\n    }\n  } catch (event) {\n    return CardService.newActionResponseBuilder()\n      .setNotification(CardService.newNotification()\n                       .setType(CardService.NotificationType.ERROR)\n                       .setText(event.message))\n      .setStateChanged(false)\n      .build()\n  }\n\n  try {\n    const isAddressChanged = globalThis.submitAddressCallback(e)\n    // @ts-ignore\n    shouldProcess = shouldProcess || isAddressChanged\n    if (isAddressChanged) {\n      notification += \"Address set.\"\n    }\n  } catch (event) {\n    return CardService.newActionResponseBuilder()\n      .setNotification(CardService.newNotification()\n                       .setType(CardService.NotificationType.ERROR)\n                       .setText(event.message))\n      .setStateChanged(false)\n      .build()\n  }\n\n  try {\n    const isTempUnitChanged = globalThis.submitTemperatureUnitCallback(e)\n    // @ts-ignore\n    shouldProcess = shouldProcess || isTempUnitChanged\n    if (isTempUnitChanged) {\n      notification += \" Unit changed.\"\n    }\n  } catch (event) {\n    return CardService.newActionResponseBuilder()\n      .setNotification(CardService.newNotification()\n                       .setType(CardService.NotificationType.ERROR)\n                       .setText(event.message))\n      .setStateChanged(false)\n      .build()\n  }\n\n  if (shouldProcess) {\n    return CardService.newActionResponseBuilder()\n      .setNavigation(CardService\n                     .newNavigation()\n                     .pushCard(mainCard.build()))\n      .setNotification(CardService.newNotification()\n                       .setType(CardService.NotificationType.INFO)\n                       .setText(notification))\n      .setStateChanged(true)\n      .build()\n  }\n\n  return CardService.newActionResponseBuilder()\n    .setNotification(CardService.newNotification()\n                     .setType(CardService.NotificationType.INFO)\n                     .setText(`Nothing changed`))\n    .setStateChanged(false)\n    .build()\n}\n\nexport function UserSection(): CardSection {\n  const applicatioModel = new ApplicationModel()\n  const userModel = new UserModel()\n\n  const isMint = applicatioModel.isMint\n\n  const userzip = userModel.zipcode\n\n  const submitAddressSuggestionsAction = CardService.newAction()\n    .setFunctionName(\"getAddressSuggestionsCallback\")\n    .setParameters({})\n\n  const processUserFormAction =  CardService.newAction()\n    .setFunctionName(\"processUserPreferencesFormCallback\")\n    .setParameters({})\n\n  let setAddressTitle = \"Forecast Location\"\n  if (userzip) {\n    setAddressTitle += ` (${userzip})`\n  }\n\n  const cardSection = new CardSectionFactory()\n  const widgetFactory = new WidgetFactory()\n\n  cardSection\n    .addWidget(widgetFactory._TextInput({\n      fieldName: \"user_name_key\",\n      hint: \"How should SparseWx address you? (25 character max)\",\n      title: \"Your Name (optional)\",\n    }))\n    .addWidget(widgetFactory._TextInput({\n      fieldName: \"user_address_key\",\n      hint: \"City, state or ZIP code\",\n      title: setAddressTitle,\n\n      suggestions: submitAddressSuggestionsAction,\n    }))\n    .addWidget(widgetFactory._SelectionInput({\n      fieldName: \"temperature_unit_list\",\n      items: [\n        {\n          text: \"Fahrenheit\",\n          value: \"dropdown_item_f\",\n\n          selected: true,\n        },\n        {\n          text: \"Celsius\",\n          value: \"dropdown_item_c\",\n\n          selected: false,\n        },\n      ],\n      title: \"Temperature Scale\",\n      type: \"DROPDOWN\",\n    }))\n    .addWidget(widgetFactory._TextButton({\n      action: processUserFormAction,\n      text: \"Submit\",\n    }))\n\n  // if (!isMint) {\n  //   cardSection\n  //     .addWidget(ResetWidget())\n  // }\n\n  return cardSection.setCollapsible(false).build()\n}\n","import { BaseCardController } from \"@/Controllers\"\nimport { DisclaimerSection } from \"@/Cards/Main/Sections/Disclaimer\"\nimport { UserInfoSection } from \"@/Cards/User/Sections\"\nimport { UserSection as UserInputSection } from \"@/Handlers/Callbacks\"\n\nexport class UserCardController extends BaseCardController  {\n\n    constructor() {\n      super()\n      this.card.addSection(UserInfoSection())\n      this.card.addSection(UserInputSection())\n      this.card.addSection(DisclaimerSection())\n    }\n}\n","import {BaseCardController} from \"@/Controllers/BaseCardController\"\nimport {MainCardController} from \"@/Controllers/MainCardController\"\nimport {UserCardController} from \"@/Controllers/UserCardController\"\n\nexport {\n    BaseCardController,\n    MainCardController,\n    UserCardController,\n}\n","import {\n  MainCardController,\n  UserCardController,\n} from \"@/Controllers\"\n\nimport { MainCardModel, UserCardModel } from \"@/Models\"\n\nconst userProperties: Properties = PropertiesService.getUserProperties()\nglobalThis.userProperties = userProperties\n\n\nglobalThis.buildAddOn = (): Card => {\n\n  const model = new MainCardModel()\n  const mainCard = new MainCardController()\n  mainCard.bindingContext(model)\n  return mainCard.build()\n  //\n//  const userCardModel = new UserCardModel()\n // const userCard = new UserCardController()\n  //userCard.bindingContext(userCardModel)\n  //  return userCard.build()\n//  return userCard\n}\n//\nglobalThis.buildHomePage = (): Card => {\n  var cardSection = CardService.newCardSection()\n    .addWidget(CardService.newKeyValue()\n    .setIconUrl(\"https://icon.png\")\n    .setContent(\"KeyValue widget with an image on the left and text on the right\"))\n  // Finish building the card section ...\n\n  var card = CardService.newCardBuilder()\n    .setName(\"Card name\")\n    .setHeader(CardService.newCardHeader().setTitle(\"Homepage\"))\n    .addSection(cardSection)\n    .build();\n  return card\n}\n"]}