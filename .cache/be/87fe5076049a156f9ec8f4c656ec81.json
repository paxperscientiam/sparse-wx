{"id":"MszO","dependencies":[{"name":"/Users/ramos/Development/gmail-weather/tsconfig.json","includedInParent":true,"mtime":1577992220082},{"name":"/Users/ramos/Development/gmail-weather/package.json","includedInParent":true,"mtime":1577926760432}],"generated":{"js":"function o(o,t){var d=o.split(\".\");return t&&t.thousands&&(d[0]=d[0].replace(/(\\d)(?=(\\d\\d\\d)+(?!\\d))/g,\"$1\"+t.thousands)),o=d.join(t.decimal)}function t(t){return o(t=t.toString(),{decimal:\".\",thousands:\",\"})}exports.__esModule=!0,exports.commaThousDotDec=t;"},"sourceMaps":{"js":{"mappings":[{"source":"Utilities/Number.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":1,"column":0}},{"source":"Utilities/Number.ts","name":null,"original":{"line":4,"column":9},"generated":{"line":1,"column":9}},{"source":"Utilities/Number.ts","name":null,"original":{"line":4,"column":27},"generated":{"line":1,"column":11}},{"source":"Utilities/Number.ts","name":null,"original":{"line":4,"column":33},"generated":{"line":1,"column":13}},{"source":"Utilities/Number.ts","name":null,"original":{"line":5,"column":8},"generated":{"line":1,"column":16}},{"source":"Utilities/Number.ts","name":null,"original":{"line":5,"column":8},"generated":{"line":1,"column":20}},{"source":"Utilities/Number.ts","name":null,"original":{"line":5,"column":20},"generated":{"line":1,"column":22}},{"source":"Utilities/Number.ts","name":null,"original":{"line":5,"column":25},"generated":{"line":1,"column":24}},{"source":"Utilities/Number.ts","name":null,"original":{"line":5,"column":31},"generated":{"line":1,"column":30}},{"source":"Utilities/Number.ts","name":null,"original":{"line":11,"column":9},"generated":{"line":1,"column":35}},{"source":"Utilities/Number.ts","name":null,"original":{"line":6,"column":6},"generated":{"line":1,"column":42}},{"source":"Utilities/Number.ts","name":null,"original":{"line":6,"column":20},"generated":{"line":1,"column":45}},{"source":"Utilities/Number.ts","name":null,"original":{"line":6,"column":31},"generated":{"line":1,"column":47}},{"source":"Utilities/Number.ts","name":null,"original":{"line":7,"column":4},"generated":{"line":1,"column":59}},{"source":"Utilities/Number.ts","name":null,"original":{"line":7,"column":14},"generated":{"line":1,"column":61}},{"source":"Utilities/Number.ts","name":null,"original":{"line":7,"column":19},"generated":{"line":1,"column":64}},{"source":"Utilities/Number.ts","name":null,"original":{"line":7,"column":29},"generated":{"line":1,"column":66}},{"source":"Utilities/Number.ts","name":null,"original":{"line":7,"column":32},"generated":{"line":1,"column":69}},{"source":"Utilities/Number.ts","name":null,"original":{"line":7,"column":40},"generated":{"line":1,"column":77}},{"source":"Utilities/Number.ts","name":null,"original":{"line":7,"column":68},"generated":{"line":1,"column":104}},{"source":"Utilities/Number.ts","name":null,"original":{"line":7,"column":75},"generated":{"line":1,"column":109}},{"source":"Utilities/Number.ts","name":null,"original":{"line":7,"column":86},"generated":{"line":1,"column":111}},{"source":"Utilities/Number.ts","name":null,"original":{"line":9,"column":2},"generated":{"line":1,"column":123}},{"source":"Utilities/Number.ts","name":null,"original":{"line":9,"column":9},"generated":{"line":1,"column":125}},{"source":"Utilities/Number.ts","name":null,"original":{"line":9,"column":19},"generated":{"line":1,"column":127}},{"source":"Utilities/Number.ts","name":null,"original":{"line":9,"column":24},"generated":{"line":1,"column":132}},{"source":"Utilities/Number.ts","name":null,"original":{"line":9,"column":35},"generated":{"line":1,"column":134}},{"source":"Utilities/Number.ts","name":null,"original":{"line":14,"column":0},"generated":{"line":1,"column":143}},{"source":"Utilities/Number.ts","name":null,"original":{"line":14,"column":16},"generated":{"line":1,"column":152}},{"source":"Utilities/Number.ts","name":null,"original":{"line":14,"column":33},"generated":{"line":1,"column":154}},{"source":"Utilities/Number.ts","name":null,"original":{"line":20,"column":9},"generated":{"line":1,"column":157}},{"source":"Utilities/Number.ts","name":null,"original":{"line":20,"column":9},"generated":{"line":1,"column":164}},{"source":"Utilities/Number.ts","name":null,"original":{"line":15,"column":2},"generated":{"line":1,"column":166}},{"source":"Utilities/Number.ts","name":null,"original":{"line":15,"column":9},"generated":{"line":1,"column":168}},{"source":"Utilities/Number.ts","name":null,"original":{"line":15,"column":14},"generated":{"line":1,"column":170}},{"source":"Utilities/Number.ts","name":null,"original":{"line":16,"column":21},"generated":{"line":1,"column":181}},{"source":"Utilities/Number.ts","name":null,"original":{"line":17,"column":4},"generated":{"line":1,"column":182}},{"source":"Utilities/Number.ts","name":null,"original":{"line":17,"column":13},"generated":{"line":1,"column":190}},{"source":"Utilities/Number.ts","name":null,"original":{"line":18,"column":4},"generated":{"line":1,"column":194}},{"source":"Utilities/Number.ts","name":null,"original":{"line":18,"column":15},"generated":{"line":1,"column":204}},{"source":"Utilities/Number.ts","name":null,"original":{"line":25,"column":0},"generated":{"line":1,"column":210}},{"source":"Utilities/Number.ts","name":null,"original":{"line":25,"column":0},"generated":{"line":1,"column":218}},{"source":"Utilities/Number.ts","name":null,"original":{"line":25,"column":0},"generated":{"line":1,"column":230}},{"source":"Utilities/Number.ts","name":null,"original":{"line":14,"column":0},"generated":{"line":1,"column":232}},{"source":"Utilities/Number.ts","name":null,"original":{"line":14,"column":0},"generated":{"line":1,"column":240}},{"source":"Utilities/Number.ts","name":null,"original":{"line":14,"column":0},"generated":{"line":1,"column":257}}],"sources":{"Utilities/Number.ts":"// toLocaleString polyfill\n// https://github.com/willsp/polyfill-Number.toLocaleString-with-Locales/blob/master/polyfill.number.toLocaleString.js\n\nfunction replaceSeparators(sNum, separators) {\n  const sNumParts = sNum.split(\".\")\n  if (separators && separators.thousands) {\n    sNumParts[0] = sNumParts[0].replace(/(\\d)(?=(\\d\\d\\d)+(?!\\d))/g, \"$1\" + separators.thousands)\n  }\n  sNum = sNumParts.join(separators.decimal)\n\n  return sNum\n}\n\nexport function commaThousDotDec(sNum: number|string) {\n  sNum = sNum.toString()\n  const separators = {\n    decimal: \".\",\n    thousands: \",\",\n  }\n  return replaceSeparators(sNum, separators)\n}\n\n// Number.prototype.commaThousDotDec = function() {\n//   return commaThousDotDec(this.toString())\n// }\n"},"lineCount":null}},"error":null,"hash":"585cf4053b0eac1f16b084a57059603f","cacheData":{"env":{}}}