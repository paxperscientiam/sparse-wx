{"code":"// import \"Cards/UserCard/Sections/_Actions\"\r\nimport { UserCard } from \"~Cards/User\";\r\nimport { WidgetFactory } from \"~Cards/Aux\";\r\nconst widgetFactory = new WidgetFactory();\r\nimport { MainCard } from \"~Cards/Main\";\r\nimport { UI } from \"~Data/Dictionary\";\r\nimport { fetch } from \"~Data/PushPull\";\r\n// @ts-ignore\r\nApplication.goToUserCardCallback = () => {\r\n    return CardService.newActionResponseBuilder()\r\n        .setNavigation(CardService.newNavigation()\r\n        // @ts-ignore\r\n        //  .pushCard(uc.get(\"mainCard\")),\r\n        //        .pushCard(_cards.mainCard.build()),\r\n        .pushCard(UserCard().build()))\r\n        .setStateChanged(false)\r\n        .build();\r\n};\r\n// @ts-ignore\r\nApplication.refreshHomeCardCallback = () => {\r\n    return CardService.newActionResponseBuilder()\r\n        .setNavigation(CardService.newNavigation()\r\n        .updateCard(MainCard().build()))\r\n        .setStateChanged(false)\r\n        .build();\r\n};\r\nexport function NavButtonsWidget() {\r\n    const COLORS = UI.COLORS.SCHEME;\r\n    let settingsTextButton = \"SETTINGS\";\r\n    const isMint = !!fetch(\"state\", \"mint\");\r\n    if (isMint) {\r\n        settingsTextButton = \"SET ADDRESS\";\r\n    }\r\n    const action1 = CardService\r\n        .newAction()\r\n        .setFunctionName(\"goToUserCardCallback\");\r\n    const action2 = CardService\r\n        .newAction()\r\n        .setFunctionName(\"refreshHomeCardCallback\");\r\n    const buttonSet = CardService.newButtonSet();\r\n    buttonSet.addButton(widgetFactory._TextButton({\r\n        action: action1,\r\n        text: `<font color=\"${COLORS.SECONDARY}\">[ ${settingsTextButton} ]</font>`,\r\n    }));\r\n    buttonSet.addButton(widgetFactory._TextButton({\r\n        action: action2,\r\n        text: `<font color=\"${COLORS.SECONDARY}\">[ REFRESH ]</font>`,\r\n    }));\r\n    return buttonSet;\r\n}\r\n//# sourceMappingURL=NavButtons.js.map","map":"{\"version\":3,\"file\":\"NavButtons.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/Cards/Main/Widgets/NavButtons.ts\"],\"names\":[],\"mappings\":\"AAAA,4CAA4C;AAC5C,OAAO,EAAE,QAAQ,EAAE,MAAM,aAAa,CAAA;AAEtC,OAAO,EAAE,aAAa,EAAE,MAAM,YAAY,CAAA;AAC1C,MAAM,aAAa,GAAG,IAAI,aAAa,EAAE,CAAA;AAEzC,OAAO,EAAE,QAAQ,EAAE,MAAM,aAAa,CAAA;AAEtC,OAAO,EAAC,EAAE,EAAC,MAAM,kBAAkB,CAAA;AAEnC,OAAO,EAAC,KAAK,EAAC,MAAM,gBAAgB,CAAA;AAEpC,aAAa;AACb,WAAW,CAAC,oBAAoB,GAAG,GAAmB,EAAE;IACtD,OAAO,WAAW,CAAC,wBAAwB,EAAE;SAC1C,aAAa,CACZ,WAAW,CAAC,aAAa,EAAE;QAC3B,aAAa;QACb,kCAAkC;QAClC,6CAA6C;SAC1C,QAAQ,CAAC,QAAQ,EAAE,CAAC,KAAK,EAAE,CAAC,CAChC;SACA,eAAe,CAAC,KAAK,CAAC;SACtB,KAAK,EAAE,CAAA;AACZ,CAAC,CAAA;AAED,aAAa;AACb,WAAW,CAAC,uBAAuB,GAAG,GAAmB,EAAE;IACzD,OAAO,WAAW,CAAC,wBAAwB,EAAE;SAC1C,aAAa,CACZ,WAAW,CAAC,aAAa,EAAE;SACxB,UAAU,CAAC,QAAQ,EAAE,CAAC,KAAK,EAAE,CAAC,CAClC;SACA,eAAe,CAAC,KAAK,CAAC;SACtB,KAAK,EAAE,CAAA;AACZ,CAAC,CAAA;AAED,MAAM,UAAU,gBAAgB;IAC9B,MAAM,MAAM,GAAG,EAAE,CAAC,MAAM,CAAC,MAAM,CAAA;IAC/B,IAAI,kBAAkB,GAAG,UAAU,CAAA;IAEnC,MAAM,MAAM,GAAG,CAAC,CAAC,KAAK,CAAC,OAAO,EAAE,MAAM,CAAC,CAAA;IAEvC,IAAI,MAAM,EAAE;QACV,kBAAkB,GAAG,aAAa,CAAA;KACnC;IAED,MAAM,OAAO,GAAG,WAAW;SACxB,SAAS,EAAE;SACX,eAAe,CAAC,sBAAsB,CAAC,CAAA;IAE1C,MAAM,OAAO,GAAG,WAAW;SACxB,SAAS,EAAE;SACX,eAAe,CAAC,yBAAyB,CAAC,CAAA;IAE7C,MAAM,SAAS,GAAc,WAAW,CAAC,YAAY,EAAE,CAAA;IAEvD,SAAS,CAAC,SAAS,CAAC,aAAa,CAAC,WAAW,CAAC;QAC5C,MAAM,EAAE,OAAO;QACf,IAAI,EAAE,gBAAgB,MAAM,CAAC,SAAS,OAAO,kBAAkB,WAAW;KAC3E,CAAC,CAAC,CAAA;IAEH,SAAS,CAAC,SAAS,CAAC,aAAa,CAAC,WAAW,CAAC;QAC5C,MAAM,EAAE,OAAO;QACf,IAAI,EAAE,gBAAgB,MAAM,CAAC,SAAS,sBAAsB;KAC7D,CAAC,CAAC,CAAA;IAEH,OAAO,SAAS,CAAA;AAClB,CAAC\"}","dts":{"name":"/Users/ramos/Development/gmail-weather/Cards/Main/Widgets/NavButtons.d.ts","writeByteOrderMark":false,"text":"/// <reference types=\"app\" />\r\nexport declare function NavButtonsWidget(): ButtonSet;\r\n"}}
