{"code":"//     Copyright (C) 2018 Christopher David Ramos\r\nimport { getAlertsByStateService, getForecastStalenessService, getWeatherServiceDataService, } from \"~Services\";\r\nimport { HTTP } from \"~Data/Dictionary\";\r\nimport { fetch, push } from \"~Data/PushPull\";\r\nimport dlv from \"@paxperscientiam/dlv.ts\";\r\nimport { timeStamp } from \"~Utilities/Date\";\r\nimport { commaThousDotDec } from \"~Utilities/Number\";\r\nimport { render } from \"~Handlers/Templates\";\r\nimport * as Truthy from \"~Utilities/Math\";\r\nimport { CardSectionFactory, WidgetFactory } from \"~Cards/Aux\";\r\nconst widgetFactory = new WidgetFactory();\r\nimport { formatDateService } from \"~Utilities/Date\";\r\nimport { AuxWeatherWidget, WeatherErrorWidget, WeatherWidget, } from \"~Cards/Main/Widgets/Weather\";\r\nexport function WeatherSection() {\r\n    const wxSectionData = {};\r\n    const address = fetch(\"user\", \"address\");\r\n    if (!address) {\r\n        throw new Error(\"Unable to determine your location\");\r\n    }\r\n    let header;\r\n    let widgetTextUpdateTime;\r\n    const alertUrl = HTTP.WX_SERVICE.URL.STATE_ALERTS;\r\n    const objForecastStaleness = getForecastStalenessService();\r\n    const weatherData = getWeatherServiceDataService();\r\n    const locality = fetch(\"user\", \"city\");\r\n    const userstate = fetch(\"user\", \"state\");\r\n    const elevation = fetch(\"wx\", \"elevation\"); // {\"value\":0,\"unitCode\":\"unit:m\"}\r\n    const elevationM = dlv(elevation, \"value\");\r\n    let location;\r\n    if (!!locality) {\r\n        location = locality;\r\n    }\r\n    if (!!userstate) {\r\n        location += \", \" + userstate;\r\n    }\r\n    const objgetAlertsByStateService = getAlertsByStateService();\r\n    let alertsCount = 0;\r\n    let alertsLink = \"#\";\r\n    if (objgetAlertsByStateService[0]) {\r\n        alertsCount = objgetAlertsByStateService[1];\r\n        alertsLink = `${alertUrl}${userstate}.php?x=1`;\r\n    }\r\n    if (elevationM != null) {\r\n        // @ts-ignore\r\n        wxSectionData.elevationM = commaThousDotDec(parseInt(elevationM, 10));\r\n        // @ts-ignore\r\n        wxSectionData.elevationFt = commaThousDotDec(\r\n        // @ts-ignore\r\n        parseInt(elevationM * 3.281, 10));\r\n    }\r\n    header = render(\"localityInfo\", {\r\n        alertsCount,\r\n        alertsLink,\r\n        location,\r\n        ...wxSectionData,\r\n    });\r\n    widgetTextUpdateTime = \" \";\r\n    const strUpdateDate = fetch(\"wx\", \"updateTime\");\r\n    let dateUpdateDate;\r\n    if (!strUpdateDate) {\r\n        widgetTextUpdateTime = \" \";\r\n    }\r\n    dateUpdateDate = new Date(strUpdateDate);\r\n    if (Truthy.isDate(dateUpdateDate)) {\r\n        if (objForecastStaleness[0]) {\r\n            widgetTextUpdateTime = `Last updated ${objForecastStaleness[1].toLowerCase()} ago\n${formatDateService(dateUpdateDate)}`;\r\n        }\r\n    }\r\n    const data = {\r\n        header: \"SparseWx ðŸ‡ºðŸ‡¸\",\r\n    };\r\n    push([\"state\", \"card.Main.section.Weather.header\"], widgetTextUpdateTime);\r\n    const wxSection = new CardSectionFactory(data)\r\n        .addWidget(widgetFactory._Paragraph({\r\n        text: header,\r\n    }));\r\n    const wxPN = weatherData;\r\n    let wxPNResult;\r\n    // @ts-ignore\r\n    const wxPnStatus = wxPN.status[wxPN.status.length - 1];\r\n    try {\r\n        if (!wxPnStatus[0]) {\r\n            throw new Error(wxPnStatus[1]);\r\n        }\r\n        let i = 0;\r\n        do {\r\n            wxPNResult = wxPN.getPeriod(i);\r\n            wxSection.addWidget(WeatherWidget(wxPNResult));\r\n            i++;\r\n        } while (i < wxPN.wxPeriodCount);\r\n        Logger.log(`[${timeStamp()}][isWxFetchSuccessful]: TRUE`);\r\n        wxSection.addWidget(widgetFactory._KeyValue({\r\n            content: `<p><font color=\"#AAAAAA\">${widgetTextUpdateTime}</font></p>`,\r\n            multiline: true,\r\n        }));\r\n    }\r\n    catch (e) {\r\n        Logger.log(`[${timeStamp()}] ${e.message}`);\r\n        wxSection.addWidget(WeatherErrorWidget(e.message));\r\n    }\r\n    finally {\r\n        wxSection.addWidget(AuxWeatherWidget());\r\n    }\r\n    return wxSection.build();\r\n}\r\n//# sourceMappingURL=Weather.js.map","map":"{\"version\":3,\"file\":\"Weather.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/Cards/Main/Sections/Weather.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/ramos/Development/gmail-weather/Cards/Main/Sections/Weather.d.ts","writeByteOrderMark":false,"text":"/// <reference types=\"app\" />\r\nexport declare function WeatherSection(): CardSection;\r\n"}}
